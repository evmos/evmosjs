// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: evmos/revenue/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace evmos.revenue.v1 {
    export class MsgRegisterRevenue extends pb_1.Message {
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
            nonces?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
                if ("nonces" in data && data.nonces != undefined) {
                    this.nonces = data.nonces;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonces() {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set nonces(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
            nonces?: number[];
        }) {
            const message = new MsgRegisterRevenue({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            if (data.nonces != null) {
                message.nonces = data.nonces;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
                withdrawer_address?: string;
                nonces?: number[];
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            if (this.nonces != null) {
                data.nonces = this.nonces;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.contract_address === "string" && this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (typeof this.deployer_address === "string" && this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (typeof this.withdrawer_address === "string" && this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (this.nonces !== undefined)
                writer.writePackedUint64(4, this.nonces);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    case 4:
                        message.nonces = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterRevenue {
            return MsgRegisterRevenue.deserialize(bytes);
        }
    }
    export class MsgRegisterRevenueResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgRegisterRevenueResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterRevenueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterRevenueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterRevenueResponse {
            return MsgRegisterRevenueResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateRevenue extends pb_1.Message {
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }) {
            const message = new MsgUpdateRevenue({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
                withdrawer_address?: string;
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.contract_address === "string" && this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (typeof this.deployer_address === "string" && this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (typeof this.withdrawer_address === "string" && this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateRevenue {
            return MsgUpdateRevenue.deserialize(bytes);
        }
    }
    export class MsgUpdateRevenueResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgUpdateRevenueResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateRevenueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateRevenueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateRevenueResponse {
            return MsgUpdateRevenueResponse.deserialize(bytes);
        }
    }
    export class MsgCancelRevenue extends pb_1.Message {
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
        }) {
            const message = new MsgCancelRevenue({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.contract_address === "string" && this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (typeof this.deployer_address === "string" && this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelRevenue {
            return MsgCancelRevenue.deserialize(bytes);
        }
    }
    export class MsgCancelRevenueResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgCancelRevenueResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelRevenueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelRevenueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelRevenueResponse {
            return MsgCancelRevenueResponse.deserialize(bytes);
        }
    }
}
