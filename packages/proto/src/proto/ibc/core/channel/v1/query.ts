// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: ibc/core/channel/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../client/v1/client";
import * as dependency_2 from "./../../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_3 from "./channel";
import * as dependency_5 from "./../../../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace ibc.core.channel.v1 {
    export class QueryChannelRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
        }) {
            const message = new QueryChannelRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelRequest {
            return QueryChannelRequest.deserialize(bytes);
        }
    }
    export class QueryChannelResponse extends pb_1.Message {
        constructor(data?: any[] | {
            channel?: dependency_3.ibc.core.channel.v1.Channel;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channel" in data && data.channel != undefined) {
                    this.channel = data.channel;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get channel() {
            return pb_1.Message.getWrapperField(this, dependency_3.ibc.core.channel.v1.Channel, 1) as dependency_3.ibc.core.channel.v1.Channel;
        }
        set channel(value: dependency_3.ibc.core.channel.v1.Channel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            channel?: ReturnType<typeof dependency_3.ibc.core.channel.v1.Channel.prototype.toObject>;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryChannelResponse({});
            if (data.channel != null) {
                message.channel = dependency_3.ibc.core.channel.v1.Channel.fromObject(data.channel);
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                channel?: ReturnType<typeof dependency_3.ibc.core.channel.v1.Channel.prototype.toObject>;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.channel != null) {
                data.channel = this.channel.toObject();
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.channel !== undefined)
                writer.writeMessage(1, this.channel, () => this.channel.serialize(writer));
            if (this.proof !== undefined)
                writer.writeBytes(2, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(3, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.channel, () => message.channel = dependency_3.ibc.core.channel.v1.Channel.deserialize(reader));
                        break;
                    case 2:
                        message.proof = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelResponse {
            return QueryChannelResponse.deserialize(bytes);
        }
    }
    export class QueryChannelsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryChannelsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pagination !== undefined)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelsRequest {
            return QueryChannelsRequest.deserialize(bytes);
        }
    }
    export class QueryChannelsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            channels?: dependency_3.ibc.core.channel.v1.IdentifiedChannel[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channels" in data && data.channels != undefined) {
                    this.channels = data.channels;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get channels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.ibc.core.channel.v1.IdentifiedChannel, 1) as dependency_3.ibc.core.channel.v1.IdentifiedChannel[];
        }
        set channels(value: dependency_3.ibc.core.channel.v1.IdentifiedChannel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            channels?: ReturnType<typeof dependency_3.ibc.core.channel.v1.IdentifiedChannel.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryChannelsResponse({});
            if (data.channels != null) {
                message.channels = data.channels.map(item => dependency_3.ibc.core.channel.v1.IdentifiedChannel.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                channels?: ReturnType<typeof dependency_3.ibc.core.channel.v1.IdentifiedChannel.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.channels != null) {
                data.channels = this.channels.map((item: dependency_3.ibc.core.channel.v1.IdentifiedChannel) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.channels !== undefined)
                writer.writeRepeatedMessage(1, this.channels, (item: dependency_3.ibc.core.channel.v1.IdentifiedChannel) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (this.height !== undefined)
                writer.writeMessage(3, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.channels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.ibc.core.channel.v1.IdentifiedChannel.deserialize(reader), dependency_3.ibc.core.channel.v1.IdentifiedChannel));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelsResponse {
            return QueryChannelsResponse.deserialize(bytes);
        }
    }
    export class QueryConnectionChannelsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            connection?: string;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("connection" in data && data.connection != undefined) {
                    this.connection = data.connection;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get connection() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set connection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            connection?: string;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryConnectionChannelsRequest({});
            if (data.connection != null) {
                message.connection = data.connection;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                connection?: string;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.connection != null) {
                data.connection = this.connection;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.connection === "string" && this.connection.length)
                writer.writeString(1, this.connection);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryConnectionChannelsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryConnectionChannelsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.connection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryConnectionChannelsRequest {
            return QueryConnectionChannelsRequest.deserialize(bytes);
        }
    }
    export class QueryConnectionChannelsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            channels?: dependency_3.ibc.core.channel.v1.IdentifiedChannel[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channels" in data && data.channels != undefined) {
                    this.channels = data.channels;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get channels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.ibc.core.channel.v1.IdentifiedChannel, 1) as dependency_3.ibc.core.channel.v1.IdentifiedChannel[];
        }
        set channels(value: dependency_3.ibc.core.channel.v1.IdentifiedChannel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            channels?: ReturnType<typeof dependency_3.ibc.core.channel.v1.IdentifiedChannel.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryConnectionChannelsResponse({});
            if (data.channels != null) {
                message.channels = data.channels.map(item => dependency_3.ibc.core.channel.v1.IdentifiedChannel.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                channels?: ReturnType<typeof dependency_3.ibc.core.channel.v1.IdentifiedChannel.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.channels != null) {
                data.channels = this.channels.map((item: dependency_3.ibc.core.channel.v1.IdentifiedChannel) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.channels !== undefined)
                writer.writeRepeatedMessage(1, this.channels, (item: dependency_3.ibc.core.channel.v1.IdentifiedChannel) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (this.height !== undefined)
                writer.writeMessage(3, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryConnectionChannelsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryConnectionChannelsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.channels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.ibc.core.channel.v1.IdentifiedChannel.deserialize(reader), dependency_3.ibc.core.channel.v1.IdentifiedChannel));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryConnectionChannelsResponse {
            return QueryConnectionChannelsResponse.deserialize(bytes);
        }
    }
    export class QueryChannelClientStateRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
        }) {
            const message = new QueryChannelClientStateRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelClientStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelClientStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelClientStateRequest {
            return QueryChannelClientStateRequest.deserialize(bytes);
        }
    }
    export class QueryChannelClientStateResponse extends pb_1.Message {
        constructor(data?: any[] | {
            identified_client_state?: dependency_1.ibc.core.client.v1.IdentifiedClientState;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identified_client_state" in data && data.identified_client_state != undefined) {
                    this.identified_client_state = data.identified_client_state;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get identified_client_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.IdentifiedClientState, 1) as dependency_1.ibc.core.client.v1.IdentifiedClientState;
        }
        set identified_client_state(value: dependency_1.ibc.core.client.v1.IdentifiedClientState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            identified_client_state?: ReturnType<typeof dependency_1.ibc.core.client.v1.IdentifiedClientState.prototype.toObject>;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryChannelClientStateResponse({});
            if (data.identified_client_state != null) {
                message.identified_client_state = dependency_1.ibc.core.client.v1.IdentifiedClientState.fromObject(data.identified_client_state);
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                identified_client_state?: ReturnType<typeof dependency_1.ibc.core.client.v1.IdentifiedClientState.prototype.toObject>;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.identified_client_state != null) {
                data.identified_client_state = this.identified_client_state.toObject();
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.identified_client_state !== undefined)
                writer.writeMessage(1, this.identified_client_state, () => this.identified_client_state.serialize(writer));
            if (this.proof !== undefined)
                writer.writeBytes(2, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(3, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelClientStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelClientStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.identified_client_state, () => message.identified_client_state = dependency_1.ibc.core.client.v1.IdentifiedClientState.deserialize(reader));
                        break;
                    case 2:
                        message.proof = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelClientStateResponse {
            return QueryChannelClientStateResponse.deserialize(bytes);
        }
    }
    export class QueryChannelConsensusStateRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            revision_number?: number;
            revision_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("revision_number" in data && data.revision_number != undefined) {
                    this.revision_number = data.revision_number;
                }
                if ("revision_height" in data && data.revision_height != undefined) {
                    this.revision_height = data.revision_height;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get revision_number() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set revision_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get revision_height() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set revision_height(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            revision_number?: number;
            revision_height?: number;
        }) {
            const message = new QueryChannelConsensusStateRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.revision_number != null) {
                message.revision_number = data.revision_number;
            }
            if (data.revision_height != null) {
                message.revision_height = data.revision_height;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                revision_number?: number;
                revision_height?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.revision_number != null) {
                data.revision_number = this.revision_number;
            }
            if (this.revision_height != null) {
                data.revision_height = this.revision_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.revision_number !== undefined)
                writer.writeUint64(3, this.revision_number);
            if (this.revision_height !== undefined)
                writer.writeUint64(4, this.revision_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelConsensusStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelConsensusStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.revision_number = reader.readUint64();
                        break;
                    case 4:
                        message.revision_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelConsensusStateRequest {
            return QueryChannelConsensusStateRequest.deserialize(bytes);
        }
    }
    export class QueryChannelConsensusStateResponse extends pb_1.Message {
        constructor(data?: any[] | {
            consensus_state?: dependency_5.google.protobuf.Any;
            client_id?: string;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consensus_state" in data && data.consensus_state != undefined) {
                    this.consensus_state = data.consensus_state;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get consensus_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Any, 1) as dependency_5.google.protobuf.Any;
        }
        set consensus_state(value: dependency_5.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get client_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 4) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            consensus_state?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>;
            client_id?: string;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryChannelConsensusStateResponse({});
            if (data.consensus_state != null) {
                message.consensus_state = dependency_5.google.protobuf.Any.fromObject(data.consensus_state);
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                consensus_state?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>;
                client_id?: string;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.consensus_state != null) {
                data.consensus_state = this.consensus_state.toObject();
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consensus_state !== undefined)
                writer.writeMessage(1, this.consensus_state, () => this.consensus_state.serialize(writer));
            if (typeof this.client_id === "string" && this.client_id.length)
                writer.writeString(2, this.client_id);
            if (this.proof !== undefined)
                writer.writeBytes(3, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(4, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChannelConsensusStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChannelConsensusStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consensus_state, () => message.consensus_state = dependency_5.google.protobuf.Any.deserialize(reader));
                        break;
                    case 2:
                        message.client_id = reader.readString();
                        break;
                    case 3:
                        message.proof = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChannelConsensusStateResponse {
            return QueryChannelConsensusStateResponse.deserialize(bytes);
        }
    }
    export class QueryPacketCommitmentRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            const message = new QueryPacketCommitmentRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                sequence?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.sequence !== undefined)
                writer.writeUint64(3, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketCommitmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketCommitmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketCommitmentRequest {
            return QueryPacketCommitmentRequest.deserialize(bytes);
        }
    }
    export class QueryPacketCommitmentResponse extends pb_1.Message {
        constructor(data?: any[] | {
            commitment?: Uint8Array;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commitment" in data && data.commitment != undefined) {
                    this.commitment = data.commitment;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get commitment() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set commitment(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            commitment?: Uint8Array;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryPacketCommitmentResponse({});
            if (data.commitment != null) {
                message.commitment = data.commitment;
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                commitment?: Uint8Array;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.commitment != null) {
                data.commitment = this.commitment;
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commitment !== undefined)
                writer.writeBytes(1, this.commitment);
            if (this.proof !== undefined)
                writer.writeBytes(2, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(3, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketCommitmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketCommitmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commitment = reader.readBytes();
                        break;
                    case 2:
                        message.proof = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketCommitmentResponse {
            return QueryPacketCommitmentResponse.deserialize(bytes);
        }
    }
    export class QueryPacketCommitmentsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 3) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryPacketCommitmentsRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.pagination !== undefined)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketCommitmentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketCommitmentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketCommitmentsRequest {
            return QueryPacketCommitmentsRequest.deserialize(bytes);
        }
    }
    export class QueryPacketCommitmentsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            commitments?: dependency_3.ibc.core.channel.v1.PacketState[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commitments" in data && data.commitments != undefined) {
                    this.commitments = data.commitments;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get commitments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.ibc.core.channel.v1.PacketState, 1) as dependency_3.ibc.core.channel.v1.PacketState[];
        }
        set commitments(value: dependency_3.ibc.core.channel.v1.PacketState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            commitments?: ReturnType<typeof dependency_3.ibc.core.channel.v1.PacketState.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryPacketCommitmentsResponse({});
            if (data.commitments != null) {
                message.commitments = data.commitments.map(item => dependency_3.ibc.core.channel.v1.PacketState.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                commitments?: ReturnType<typeof dependency_3.ibc.core.channel.v1.PacketState.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.commitments != null) {
                data.commitments = this.commitments.map((item: dependency_3.ibc.core.channel.v1.PacketState) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commitments !== undefined)
                writer.writeRepeatedMessage(1, this.commitments, (item: dependency_3.ibc.core.channel.v1.PacketState) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (this.height !== undefined)
                writer.writeMessage(3, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketCommitmentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketCommitmentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.commitments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.ibc.core.channel.v1.PacketState.deserialize(reader), dependency_3.ibc.core.channel.v1.PacketState));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketCommitmentsResponse {
            return QueryPacketCommitmentsResponse.deserialize(bytes);
        }
    }
    export class QueryPacketReceiptRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            const message = new QueryPacketReceiptRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                sequence?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.sequence !== undefined)
                writer.writeUint64(3, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketReceiptRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketReceiptRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketReceiptRequest {
            return QueryPacketReceiptRequest.deserialize(bytes);
        }
    }
    export class QueryPacketReceiptResponse extends pb_1.Message {
        constructor(data?: any[] | {
            received?: boolean;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("received" in data && data.received != undefined) {
                    this.received = data.received;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get received() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set received(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 4) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            received?: boolean;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryPacketReceiptResponse({});
            if (data.received != null) {
                message.received = data.received;
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                received?: boolean;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.received != null) {
                data.received = this.received;
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.received !== undefined)
                writer.writeBool(2, this.received);
            if (this.proof !== undefined)
                writer.writeBytes(3, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(4, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketReceiptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketReceiptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.received = reader.readBool();
                        break;
                    case 3:
                        message.proof = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketReceiptResponse {
            return QueryPacketReceiptResponse.deserialize(bytes);
        }
    }
    export class QueryPacketAcknowledgementRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            sequence?: number;
        }) {
            const message = new QueryPacketAcknowledgementRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                sequence?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.sequence !== undefined)
                writer.writeUint64(3, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketAcknowledgementRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketAcknowledgementRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketAcknowledgementRequest {
            return QueryPacketAcknowledgementRequest.deserialize(bytes);
        }
    }
    export class QueryPacketAcknowledgementResponse extends pb_1.Message {
        constructor(data?: any[] | {
            acknowledgement?: Uint8Array;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("acknowledgement" in data && data.acknowledgement != undefined) {
                    this.acknowledgement = data.acknowledgement;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get acknowledgement() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set acknowledgement(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            acknowledgement?: Uint8Array;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryPacketAcknowledgementResponse({});
            if (data.acknowledgement != null) {
                message.acknowledgement = data.acknowledgement;
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                acknowledgement?: Uint8Array;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.acknowledgement != null) {
                data.acknowledgement = this.acknowledgement;
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.acknowledgement !== undefined)
                writer.writeBytes(1, this.acknowledgement);
            if (this.proof !== undefined)
                writer.writeBytes(2, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(3, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketAcknowledgementResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketAcknowledgementResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.acknowledgement = reader.readBytes();
                        break;
                    case 2:
                        message.proof = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketAcknowledgementResponse {
            return QueryPacketAcknowledgementResponse.deserialize(bytes);
        }
    }
    export class QueryPacketAcknowledgementsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
            packet_commitment_sequences?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("packet_commitment_sequences" in data && data.packet_commitment_sequences != undefined) {
                    this.packet_commitment_sequences = data.packet_commitment_sequences;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 3) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get packet_commitment_sequences() {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set packet_commitment_sequences(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            packet_commitment_sequences?: number[];
        }) {
            const message = new QueryPacketAcknowledgementsRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            if (data.packet_commitment_sequences != null) {
                message.packet_commitment_sequences = data.packet_commitment_sequences;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
                packet_commitment_sequences?: number[];
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.packet_commitment_sequences != null) {
                data.packet_commitment_sequences = this.packet_commitment_sequences;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.pagination !== undefined)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (this.packet_commitment_sequences !== undefined)
                writer.writePackedUint64(4, this.packet_commitment_sequences);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketAcknowledgementsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketAcknowledgementsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    case 4:
                        message.packet_commitment_sequences = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketAcknowledgementsRequest {
            return QueryPacketAcknowledgementsRequest.deserialize(bytes);
        }
    }
    export class QueryPacketAcknowledgementsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            acknowledgements?: dependency_3.ibc.core.channel.v1.PacketState[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("acknowledgements" in data && data.acknowledgements != undefined) {
                    this.acknowledgements = data.acknowledgements;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get acknowledgements() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.ibc.core.channel.v1.PacketState, 1) as dependency_3.ibc.core.channel.v1.PacketState[];
        }
        set acknowledgements(value: dependency_3.ibc.core.channel.v1.PacketState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            acknowledgements?: ReturnType<typeof dependency_3.ibc.core.channel.v1.PacketState.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryPacketAcknowledgementsResponse({});
            if (data.acknowledgements != null) {
                message.acknowledgements = data.acknowledgements.map(item => dependency_3.ibc.core.channel.v1.PacketState.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                acknowledgements?: ReturnType<typeof dependency_3.ibc.core.channel.v1.PacketState.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.acknowledgements != null) {
                data.acknowledgements = this.acknowledgements.map((item: dependency_3.ibc.core.channel.v1.PacketState) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.acknowledgements !== undefined)
                writer.writeRepeatedMessage(1, this.acknowledgements, (item: dependency_3.ibc.core.channel.v1.PacketState) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (this.height !== undefined)
                writer.writeMessage(3, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketAcknowledgementsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketAcknowledgementsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.acknowledgements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.ibc.core.channel.v1.PacketState.deserialize(reader), dependency_3.ibc.core.channel.v1.PacketState));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketAcknowledgementsResponse {
            return QueryPacketAcknowledgementsResponse.deserialize(bytes);
        }
    }
    export class QueryUnreceivedPacketsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            packet_commitment_sequences?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("packet_commitment_sequences" in data && data.packet_commitment_sequences != undefined) {
                    this.packet_commitment_sequences = data.packet_commitment_sequences;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get packet_commitment_sequences() {
            return pb_1.Message.getField(this, 3) as number[];
        }
        set packet_commitment_sequences(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            packet_commitment_sequences?: number[];
        }) {
            const message = new QueryUnreceivedPacketsRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.packet_commitment_sequences != null) {
                message.packet_commitment_sequences = data.packet_commitment_sequences;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                packet_commitment_sequences?: number[];
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.packet_commitment_sequences != null) {
                data.packet_commitment_sequences = this.packet_commitment_sequences;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.packet_commitment_sequences !== undefined)
                writer.writePackedUint64(3, this.packet_commitment_sequences);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUnreceivedPacketsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUnreceivedPacketsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.packet_commitment_sequences = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUnreceivedPacketsRequest {
            return QueryUnreceivedPacketsRequest.deserialize(bytes);
        }
    }
    export class QueryUnreceivedPacketsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            sequences?: number[];
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sequences" in data && data.sequences != undefined) {
                    this.sequences = data.sequences;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get sequences() {
            return pb_1.Message.getField(this, 1) as number[];
        }
        set sequences(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 2) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            sequences?: number[];
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryUnreceivedPacketsResponse({});
            if (data.sequences != null) {
                message.sequences = data.sequences;
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                sequences?: number[];
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.sequences != null) {
                data.sequences = this.sequences;
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sequences !== undefined)
                writer.writePackedUint64(1, this.sequences);
            if (this.height !== undefined)
                writer.writeMessage(2, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUnreceivedPacketsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUnreceivedPacketsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sequences = reader.readPackedUint64();
                        break;
                    case 2:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUnreceivedPacketsResponse {
            return QueryUnreceivedPacketsResponse.deserialize(bytes);
        }
    }
    export class QueryUnreceivedAcksRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
            packet_ack_sequences?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("packet_ack_sequences" in data && data.packet_ack_sequences != undefined) {
                    this.packet_ack_sequences = data.packet_ack_sequences;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get packet_ack_sequences() {
            return pb_1.Message.getField(this, 3) as number[];
        }
        set packet_ack_sequences(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
            packet_ack_sequences?: number[];
        }) {
            const message = new QueryUnreceivedAcksRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.packet_ack_sequences != null) {
                message.packet_ack_sequences = data.packet_ack_sequences;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
                packet_ack_sequences?: number[];
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.packet_ack_sequences != null) {
                data.packet_ack_sequences = this.packet_ack_sequences;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (this.packet_ack_sequences !== undefined)
                writer.writePackedUint64(3, this.packet_ack_sequences);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUnreceivedAcksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUnreceivedAcksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.packet_ack_sequences = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUnreceivedAcksRequest {
            return QueryUnreceivedAcksRequest.deserialize(bytes);
        }
    }
    export class QueryUnreceivedAcksResponse extends pb_1.Message {
        constructor(data?: any[] | {
            sequences?: number[];
            height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sequences" in data && data.sequences != undefined) {
                    this.sequences = data.sequences;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get sequences() {
            return pb_1.Message.getField(this, 1) as number[];
        }
        set sequences(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 2) as dependency_1.ibc.core.client.v1.Height;
        }
        set height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            sequences?: number[];
            height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryUnreceivedAcksResponse({});
            if (data.sequences != null) {
                message.sequences = data.sequences;
            }
            if (data.height != null) {
                message.height = dependency_1.ibc.core.client.v1.Height.fromObject(data.height);
            }
            return message;
        }
        toObject() {
            const data: {
                sequences?: number[];
                height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.sequences != null) {
                data.sequences = this.sequences;
            }
            if (this.height != null) {
                data.height = this.height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sequences !== undefined)
                writer.writePackedUint64(1, this.sequences);
            if (this.height !== undefined)
                writer.writeMessage(2, this.height, () => this.height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUnreceivedAcksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUnreceivedAcksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sequences = reader.readPackedUint64();
                        break;
                    case 2:
                        reader.readMessage(message.height, () => message.height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUnreceivedAcksResponse {
            return QueryUnreceivedAcksResponse.deserialize(bytes);
        }
    }
    export class QueryNextSequenceReceiveRequest extends pb_1.Message {
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
        }) {
            const message = new QueryNextSequenceReceiveRequest({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.port_id === "string" && this.port_id.length)
                writer.writeString(1, this.port_id);
            if (typeof this.channel_id === "string" && this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNextSequenceReceiveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNextSequenceReceiveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNextSequenceReceiveRequest {
            return QueryNextSequenceReceiveRequest.deserialize(bytes);
        }
    }
    export class QueryNextSequenceReceiveResponse extends pb_1.Message {
        constructor(data?: any[] | {
            next_sequence_receive?: number;
            proof?: Uint8Array;
            proof_height?: dependency_1.ibc.core.client.v1.Height;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("next_sequence_receive" in data && data.next_sequence_receive != undefined) {
                    this.next_sequence_receive = data.next_sequence_receive;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("proof_height" in data && data.proof_height != undefined) {
                    this.proof_height = data.proof_height;
                }
            }
        }
        get next_sequence_receive() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set next_sequence_receive(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get proof() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set proof(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get proof_height() {
            return pb_1.Message.getWrapperField(this, dependency_1.ibc.core.client.v1.Height, 3) as dependency_1.ibc.core.client.v1.Height;
        }
        set proof_height(value: dependency_1.ibc.core.client.v1.Height) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            next_sequence_receive?: number;
            proof?: Uint8Array;
            proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
        }) {
            const message = new QueryNextSequenceReceiveResponse({});
            if (data.next_sequence_receive != null) {
                message.next_sequence_receive = data.next_sequence_receive;
            }
            if (data.proof != null) {
                message.proof = data.proof;
            }
            if (data.proof_height != null) {
                message.proof_height = dependency_1.ibc.core.client.v1.Height.fromObject(data.proof_height);
            }
            return message;
        }
        toObject() {
            const data: {
                next_sequence_receive?: number;
                proof?: Uint8Array;
                proof_height?: ReturnType<typeof dependency_1.ibc.core.client.v1.Height.prototype.toObject>;
            } = {};
            if (this.next_sequence_receive != null) {
                data.next_sequence_receive = this.next_sequence_receive;
            }
            if (this.proof != null) {
                data.proof = this.proof;
            }
            if (this.proof_height != null) {
                data.proof_height = this.proof_height.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.next_sequence_receive !== undefined)
                writer.writeUint64(1, this.next_sequence_receive);
            if (this.proof !== undefined)
                writer.writeBytes(2, this.proof);
            if (this.proof_height !== undefined)
                writer.writeMessage(3, this.proof_height, () => this.proof_height.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNextSequenceReceiveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNextSequenceReceiveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.next_sequence_receive = reader.readUint64();
                        break;
                    case 2:
                        message.proof = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.proof_height, () => message.proof_height = dependency_1.ibc.core.client.v1.Height.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNextSequenceReceiveResponse {
            return QueryNextSequenceReceiveResponse.deserialize(bytes);
        }
    }
}
