// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/staking/v1beta1/authz.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as dependency_3 from "./../../base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace cosmos.staking.v1beta1 {
    export enum AuthorizationType {
        AUTHORIZATION_TYPE_UNSPECIFIED = 0,
        AUTHORIZATION_TYPE_DELEGATE = 1,
        AUTHORIZATION_TYPE_UNDELEGATE = 2,
        AUTHORIZATION_TYPE_REDELEGATE = 3
    }
    export class StakeAuthorization extends pb_1.Message {
        constructor(data?: any[] | ({
            max_tokens?: dependency_3.cosmos.base.v1beta1.Coin;
            authorization_type?: AuthorizationType;
        } & (({
            allow_list?: StakeAuthorization.Validators;
            deny_list?: never;
        } | {
            allow_list?: never;
            deny_list?: StakeAuthorization.Validators;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[2, 3]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_tokens" in data && data.max_tokens != undefined) {
                    this.max_tokens = data.max_tokens;
                }
                if ("allow_list" in data && data.allow_list != undefined) {
                    this.allow_list = data.allow_list;
                }
                if ("deny_list" in data && data.deny_list != undefined) {
                    this.deny_list = data.deny_list;
                }
                if ("authorization_type" in data && data.authorization_type != undefined) {
                    this.authorization_type = data.authorization_type;
                }
            }
        }
        get max_tokens() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 1) as dependency_3.cosmos.base.v1beta1.Coin;
        }
        set max_tokens(value: dependency_3.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get allow_list() {
            return pb_1.Message.getWrapperField(this, StakeAuthorization.Validators, 2) as StakeAuthorization.Validators;
        }
        set allow_list(value: StakeAuthorization.Validators) {
            pb_1.Message.setOneofWrapperField(this, 2, [2, 3], value);
        }
        get deny_list() {
            return pb_1.Message.getWrapperField(this, StakeAuthorization.Validators, 3) as StakeAuthorization.Validators;
        }
        set deny_list(value: StakeAuthorization.Validators) {
            pb_1.Message.setOneofWrapperField(this, 3, [2, 3], value);
        }
        get authorization_type() {
            return pb_1.Message.getField(this, 4) as AuthorizationType;
        }
        set authorization_type(value: AuthorizationType) {
            pb_1.Message.setField(this, 4, value);
        }
        get validators() {
            const cases: {
                [index: number]: "none" | "allow_list" | "deny_list";
            } = {
                0: "none",
                2: "allow_list",
                3: "deny_list"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            max_tokens?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
            allow_list?: ReturnType<typeof StakeAuthorization.Validators.prototype.toObject>;
            deny_list?: ReturnType<typeof StakeAuthorization.Validators.prototype.toObject>;
            authorization_type?: AuthorizationType;
        }) {
            const message = new StakeAuthorization({});
            if (data.max_tokens != null) {
                message.max_tokens = dependency_3.cosmos.base.v1beta1.Coin.fromObject(data.max_tokens);
            }
            if (data.allow_list != null) {
                message.allow_list = StakeAuthorization.Validators.fromObject(data.allow_list);
            }
            if (data.deny_list != null) {
                message.deny_list = StakeAuthorization.Validators.fromObject(data.deny_list);
            }
            if (data.authorization_type != null) {
                message.authorization_type = data.authorization_type;
            }
            return message;
        }
        toObject() {
            const data: {
                max_tokens?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>;
                allow_list?: ReturnType<typeof StakeAuthorization.Validators.prototype.toObject>;
                deny_list?: ReturnType<typeof StakeAuthorization.Validators.prototype.toObject>;
                authorization_type?: AuthorizationType;
            } = {};
            if (this.max_tokens != null) {
                data.max_tokens = this.max_tokens.toObject();
            }
            if (this.allow_list != null) {
                data.allow_list = this.allow_list.toObject();
            }
            if (this.deny_list != null) {
                data.deny_list = this.deny_list.toObject();
            }
            if (this.authorization_type != null) {
                data.authorization_type = this.authorization_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_tokens !== undefined)
                writer.writeMessage(1, this.max_tokens, () => this.max_tokens.serialize(writer));
            if (this.allow_list !== undefined)
                writer.writeMessage(2, this.allow_list, () => this.allow_list.serialize(writer));
            if (this.deny_list !== undefined)
                writer.writeMessage(3, this.deny_list, () => this.deny_list.serialize(writer));
            if (this.authorization_type !== undefined)
                writer.writeEnum(4, this.authorization_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StakeAuthorization {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StakeAuthorization();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.max_tokens, () => message.max_tokens = dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.allow_list, () => message.allow_list = StakeAuthorization.Validators.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.deny_list, () => message.deny_list = StakeAuthorization.Validators.deserialize(reader));
                        break;
                    case 4:
                        message.authorization_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StakeAuthorization {
            return StakeAuthorization.deserialize(bytes);
        }
    }
    export namespace StakeAuthorization {
        export class Validators extends pb_1.Message {
            constructor(data?: any[] | {
                address?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                }
            }
            get address() {
                return pb_1.Message.getField(this, 1) as string[];
            }
            set address(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                address?: string[];
            }) {
                const message = new Validators({});
                if (data.address != null) {
                    message.address = data.address;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: string[];
                } = {};
                if (this.address != null) {
                    data.address = this.address;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.address !== undefined)
                    writer.writeRepeatedString(1, this.address);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validators {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validators();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Validators {
                return Validators.deserialize(bytes);
            }
        }
    }
}
