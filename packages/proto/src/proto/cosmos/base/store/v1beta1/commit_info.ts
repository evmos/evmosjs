// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/base/store/v1beta1/commit_info.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace cosmos.base.store.v1beta1 {
    export class CommitInfo extends pb_1.Message {
        constructor(data?: any[] | {
            version?: number;
            store_infos?: StoreInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("store_infos" in data && data.store_infos != undefined) {
                    this.store_infos = data.store_infos;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get store_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, StoreInfo, 2) as StoreInfo[];
        }
        set store_infos(value: StoreInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            version?: number;
            store_infos?: ReturnType<typeof StoreInfo.prototype.toObject>[];
        }) {
            const message = new CommitInfo({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.store_infos != null) {
                message.store_infos = data.store_infos.map(item => StoreInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                store_infos?: ReturnType<typeof StoreInfo.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.store_infos != null) {
                data.store_infos = this.store_infos.map((item: StoreInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version !== undefined)
                writer.writeInt64(1, this.version);
            if (this.store_infos !== undefined)
                writer.writeRepeatedMessage(2, this.store_infos, (item: StoreInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.store_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, StoreInfo.deserialize(reader), StoreInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitInfo {
            return CommitInfo.deserialize(bytes);
        }
    }
    export class StoreInfo extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            commit_id?: CommitID;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("commit_id" in data && data.commit_id != undefined) {
                    this.commit_id = data.commit_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get commit_id() {
            return pb_1.Message.getWrapperField(this, CommitID, 2) as CommitID;
        }
        set commit_id(value: CommitID) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            commit_id?: ReturnType<typeof CommitID.prototype.toObject>;
        }) {
            const message = new StoreInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.commit_id != null) {
                message.commit_id = CommitID.fromObject(data.commit_id);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                commit_id?: ReturnType<typeof CommitID.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.commit_id != null) {
                data.commit_id = this.commit_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.commit_id !== undefined)
                writer.writeMessage(2, this.commit_id, () => this.commit_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.commit_id, () => message.commit_id = CommitID.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreInfo {
            return StoreInfo.deserialize(bytes);
        }
    }
    export class CommitID extends pb_1.Message {
        constructor(data?: any[] | {
            version?: number;
            hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hash() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            version?: number;
            hash?: Uint8Array;
        }) {
            const message = new CommitID({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                hash?: Uint8Array;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version !== undefined)
                writer.writeInt64(1, this.version);
            if (this.hash !== undefined)
                writer.writeBytes(2, this.hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitID {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readInt64();
                        break;
                    case 2:
                        message.hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitID {
            return CommitID.deserialize(bytes);
        }
    }
}
