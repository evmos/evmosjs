// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/base/reflection/v2alpha1/reflection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as pb_1 from "google-protobuf";
export namespace cosmos.base.reflection.v2alpha1 {
    export class AppDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            authn?: AuthnDescriptor;
            chain?: ChainDescriptor;
            codec?: CodecDescriptor;
            configuration?: ConfigurationDescriptor;
            query_services?: QueryServicesDescriptor;
            tx?: TxDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authn" in data && data.authn != undefined) {
                    this.authn = data.authn;
                }
                if ("chain" in data && data.chain != undefined) {
                    this.chain = data.chain;
                }
                if ("codec" in data && data.codec != undefined) {
                    this.codec = data.codec;
                }
                if ("configuration" in data && data.configuration != undefined) {
                    this.configuration = data.configuration;
                }
                if ("query_services" in data && data.query_services != undefined) {
                    this.query_services = data.query_services;
                }
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
            }
        }
        get authn() {
            return pb_1.Message.getWrapperField(this, AuthnDescriptor, 1) as AuthnDescriptor;
        }
        set authn(value: AuthnDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get chain() {
            return pb_1.Message.getWrapperField(this, ChainDescriptor, 2) as ChainDescriptor;
        }
        set chain(value: ChainDescriptor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get codec() {
            return pb_1.Message.getWrapperField(this, CodecDescriptor, 3) as CodecDescriptor;
        }
        set codec(value: CodecDescriptor) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get configuration() {
            return pb_1.Message.getWrapperField(this, ConfigurationDescriptor, 4) as ConfigurationDescriptor;
        }
        set configuration(value: ConfigurationDescriptor) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get query_services() {
            return pb_1.Message.getWrapperField(this, QueryServicesDescriptor, 5) as QueryServicesDescriptor;
        }
        set query_services(value: QueryServicesDescriptor) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, TxDescriptor, 6) as TxDescriptor;
        }
        set tx(value: TxDescriptor) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        static fromObject(data: {
            authn?: ReturnType<typeof AuthnDescriptor.prototype.toObject>;
            chain?: ReturnType<typeof ChainDescriptor.prototype.toObject>;
            codec?: ReturnType<typeof CodecDescriptor.prototype.toObject>;
            configuration?: ReturnType<typeof ConfigurationDescriptor.prototype.toObject>;
            query_services?: ReturnType<typeof QueryServicesDescriptor.prototype.toObject>;
            tx?: ReturnType<typeof TxDescriptor.prototype.toObject>;
        }) {
            const message = new AppDescriptor({});
            if (data.authn != null) {
                message.authn = AuthnDescriptor.fromObject(data.authn);
            }
            if (data.chain != null) {
                message.chain = ChainDescriptor.fromObject(data.chain);
            }
            if (data.codec != null) {
                message.codec = CodecDescriptor.fromObject(data.codec);
            }
            if (data.configuration != null) {
                message.configuration = ConfigurationDescriptor.fromObject(data.configuration);
            }
            if (data.query_services != null) {
                message.query_services = QueryServicesDescriptor.fromObject(data.query_services);
            }
            if (data.tx != null) {
                message.tx = TxDescriptor.fromObject(data.tx);
            }
            return message;
        }
        toObject() {
            const data: {
                authn?: ReturnType<typeof AuthnDescriptor.prototype.toObject>;
                chain?: ReturnType<typeof ChainDescriptor.prototype.toObject>;
                codec?: ReturnType<typeof CodecDescriptor.prototype.toObject>;
                configuration?: ReturnType<typeof ConfigurationDescriptor.prototype.toObject>;
                query_services?: ReturnType<typeof QueryServicesDescriptor.prototype.toObject>;
                tx?: ReturnType<typeof TxDescriptor.prototype.toObject>;
            } = {};
            if (this.authn != null) {
                data.authn = this.authn.toObject();
            }
            if (this.chain != null) {
                data.chain = this.chain.toObject();
            }
            if (this.codec != null) {
                data.codec = this.codec.toObject();
            }
            if (this.configuration != null) {
                data.configuration = this.configuration.toObject();
            }
            if (this.query_services != null) {
                data.query_services = this.query_services.toObject();
            }
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authn !== undefined)
                writer.writeMessage(1, this.authn, () => this.authn.serialize(writer));
            if (this.chain !== undefined)
                writer.writeMessage(2, this.chain, () => this.chain.serialize(writer));
            if (this.codec !== undefined)
                writer.writeMessage(3, this.codec, () => this.codec.serialize(writer));
            if (this.configuration !== undefined)
                writer.writeMessage(4, this.configuration, () => this.configuration.serialize(writer));
            if (this.query_services !== undefined)
                writer.writeMessage(5, this.query_services, () => this.query_services.serialize(writer));
            if (this.tx !== undefined)
                writer.writeMessage(6, this.tx, () => this.tx.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.authn, () => message.authn = AuthnDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.chain, () => message.chain = ChainDescriptor.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.codec, () => message.codec = CodecDescriptor.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.configuration, () => message.configuration = ConfigurationDescriptor.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.query_services, () => message.query_services = QueryServicesDescriptor.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.tx, () => message.tx = TxDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppDescriptor {
            return AppDescriptor.deserialize(bytes);
        }
    }
    export class TxDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            fullname?: string;
            msgs?: MsgDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("msgs" in data && data.msgs != undefined) {
                    this.msgs = data.msgs;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set fullname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get msgs() {
            return pb_1.Message.getRepeatedWrapperField(this, MsgDescriptor, 2) as MsgDescriptor[];
        }
        set msgs(value: MsgDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            fullname?: string;
            msgs?: ReturnType<typeof MsgDescriptor.prototype.toObject>[];
        }) {
            const message = new TxDescriptor({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.msgs != null) {
                message.msgs = data.msgs.map(item => MsgDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                msgs?: ReturnType<typeof MsgDescriptor.prototype.toObject>[];
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.msgs != null) {
                data.msgs = this.msgs.map((item: MsgDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.fullname === "string" && this.fullname.length)
                writer.writeString(1, this.fullname);
            if (this.msgs !== undefined)
                writer.writeRepeatedMessage(2, this.msgs, (item: MsgDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.msgs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MsgDescriptor.deserialize(reader), MsgDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TxDescriptor {
            return TxDescriptor.deserialize(bytes);
        }
    }
    export class AuthnDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            sign_modes?: SigningModeDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sign_modes" in data && data.sign_modes != undefined) {
                    this.sign_modes = data.sign_modes;
                }
            }
        }
        get sign_modes() {
            return pb_1.Message.getRepeatedWrapperField(this, SigningModeDescriptor, 1) as SigningModeDescriptor[];
        }
        set sign_modes(value: SigningModeDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            sign_modes?: ReturnType<typeof SigningModeDescriptor.prototype.toObject>[];
        }) {
            const message = new AuthnDescriptor({});
            if (data.sign_modes != null) {
                message.sign_modes = data.sign_modes.map(item => SigningModeDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                sign_modes?: ReturnType<typeof SigningModeDescriptor.prototype.toObject>[];
            } = {};
            if (this.sign_modes != null) {
                data.sign_modes = this.sign_modes.map((item: SigningModeDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sign_modes !== undefined)
                writer.writeRepeatedMessage(1, this.sign_modes, (item: SigningModeDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthnDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthnDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sign_modes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SigningModeDescriptor.deserialize(reader), SigningModeDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthnDescriptor {
            return AuthnDescriptor.deserialize(bytes);
        }
    }
    export class SigningModeDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            number?: number;
            authn_info_provider_method_fullname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("authn_info_provider_method_fullname" in data && data.authn_info_provider_method_fullname != undefined) {
                    this.authn_info_provider_method_fullname = data.authn_info_provider_method_fullname;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get authn_info_provider_method_fullname() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set authn_info_provider_method_fullname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            number?: number;
            authn_info_provider_method_fullname?: string;
        }) {
            const message = new SigningModeDescriptor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.authn_info_provider_method_fullname != null) {
                message.authn_info_provider_method_fullname = data.authn_info_provider_method_fullname;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                number?: number;
                authn_info_provider_method_fullname?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.authn_info_provider_method_fullname != null) {
                data.authn_info_provider_method_fullname = this.authn_info_provider_method_fullname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.number !== undefined)
                writer.writeInt32(2, this.number);
            if (typeof this.authn_info_provider_method_fullname === "string" && this.authn_info_provider_method_fullname.length)
                writer.writeString(3, this.authn_info_provider_method_fullname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningModeDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningModeDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readInt32();
                        break;
                    case 3:
                        message.authn_info_provider_method_fullname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningModeDescriptor {
            return SigningModeDescriptor.deserialize(bytes);
        }
    }
    export class ChainDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }) {
            const message = new ChainDescriptor({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChainDescriptor {
            return ChainDescriptor.deserialize(bytes);
        }
    }
    export class CodecDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            interfaces?: InterfaceDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interfaces" in data && data.interfaces != undefined) {
                    this.interfaces = data.interfaces;
                }
            }
        }
        get interfaces() {
            return pb_1.Message.getRepeatedWrapperField(this, InterfaceDescriptor, 1) as InterfaceDescriptor[];
        }
        set interfaces(value: InterfaceDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            interfaces?: ReturnType<typeof InterfaceDescriptor.prototype.toObject>[];
        }) {
            const message = new CodecDescriptor({});
            if (data.interfaces != null) {
                message.interfaces = data.interfaces.map(item => InterfaceDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                interfaces?: ReturnType<typeof InterfaceDescriptor.prototype.toObject>[];
            } = {};
            if (this.interfaces != null) {
                data.interfaces = this.interfaces.map((item: InterfaceDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interfaces !== undefined)
                writer.writeRepeatedMessage(1, this.interfaces, (item: InterfaceDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodecDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodecDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.interfaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InterfaceDescriptor.deserialize(reader), InterfaceDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CodecDescriptor {
            return CodecDescriptor.deserialize(bytes);
        }
    }
    export class InterfaceDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            fullname?: string;
            interface_accepting_messages?: InterfaceAcceptingMessageDescriptor[];
            interface_implementers?: InterfaceImplementerDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("interface_accepting_messages" in data && data.interface_accepting_messages != undefined) {
                    this.interface_accepting_messages = data.interface_accepting_messages;
                }
                if ("interface_implementers" in data && data.interface_implementers != undefined) {
                    this.interface_implementers = data.interface_implementers;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set fullname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get interface_accepting_messages() {
            return pb_1.Message.getRepeatedWrapperField(this, InterfaceAcceptingMessageDescriptor, 2) as InterfaceAcceptingMessageDescriptor[];
        }
        set interface_accepting_messages(value: InterfaceAcceptingMessageDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get interface_implementers() {
            return pb_1.Message.getRepeatedWrapperField(this, InterfaceImplementerDescriptor, 3) as InterfaceImplementerDescriptor[];
        }
        set interface_implementers(value: InterfaceImplementerDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            fullname?: string;
            interface_accepting_messages?: ReturnType<typeof InterfaceAcceptingMessageDescriptor.prototype.toObject>[];
            interface_implementers?: ReturnType<typeof InterfaceImplementerDescriptor.prototype.toObject>[];
        }) {
            const message = new InterfaceDescriptor({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.interface_accepting_messages != null) {
                message.interface_accepting_messages = data.interface_accepting_messages.map(item => InterfaceAcceptingMessageDescriptor.fromObject(item));
            }
            if (data.interface_implementers != null) {
                message.interface_implementers = data.interface_implementers.map(item => InterfaceImplementerDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                interface_accepting_messages?: ReturnType<typeof InterfaceAcceptingMessageDescriptor.prototype.toObject>[];
                interface_implementers?: ReturnType<typeof InterfaceImplementerDescriptor.prototype.toObject>[];
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.interface_accepting_messages != null) {
                data.interface_accepting_messages = this.interface_accepting_messages.map((item: InterfaceAcceptingMessageDescriptor) => item.toObject());
            }
            if (this.interface_implementers != null) {
                data.interface_implementers = this.interface_implementers.map((item: InterfaceImplementerDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.fullname === "string" && this.fullname.length)
                writer.writeString(1, this.fullname);
            if (this.interface_accepting_messages !== undefined)
                writer.writeRepeatedMessage(2, this.interface_accepting_messages, (item: InterfaceAcceptingMessageDescriptor) => item.serialize(writer));
            if (this.interface_implementers !== undefined)
                writer.writeRepeatedMessage(3, this.interface_implementers, (item: InterfaceImplementerDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InterfaceDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterfaceDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.interface_accepting_messages, () => pb_1.Message.addToRepeatedWrapperField(message, 2, InterfaceAcceptingMessageDescriptor.deserialize(reader), InterfaceAcceptingMessageDescriptor));
                        break;
                    case 3:
                        reader.readMessage(message.interface_implementers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, InterfaceImplementerDescriptor.deserialize(reader), InterfaceImplementerDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InterfaceDescriptor {
            return InterfaceDescriptor.deserialize(bytes);
        }
    }
    export class InterfaceImplementerDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            fullname?: string;
            type_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("type_url" in data && data.type_url != undefined) {
                    this.type_url = data.type_url;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set fullname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type_url() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set type_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fullname?: string;
            type_url?: string;
        }) {
            const message = new InterfaceImplementerDescriptor({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.type_url != null) {
                message.type_url = data.type_url;
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                type_url?: string;
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.type_url != null) {
                data.type_url = this.type_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.fullname === "string" && this.fullname.length)
                writer.writeString(1, this.fullname);
            if (typeof this.type_url === "string" && this.type_url.length)
                writer.writeString(2, this.type_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InterfaceImplementerDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterfaceImplementerDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        message.type_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InterfaceImplementerDescriptor {
            return InterfaceImplementerDescriptor.deserialize(bytes);
        }
    }
    export class InterfaceAcceptingMessageDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            fullname?: string;
            field_descriptor_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("field_descriptor_names" in data && data.field_descriptor_names != undefined) {
                    this.field_descriptor_names = data.field_descriptor_names;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set fullname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get field_descriptor_names() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set field_descriptor_names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fullname?: string;
            field_descriptor_names?: string[];
        }) {
            const message = new InterfaceAcceptingMessageDescriptor({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.field_descriptor_names != null) {
                message.field_descriptor_names = data.field_descriptor_names;
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                field_descriptor_names?: string[];
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.field_descriptor_names != null) {
                data.field_descriptor_names = this.field_descriptor_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.fullname === "string" && this.fullname.length)
                writer.writeString(1, this.fullname);
            if (this.field_descriptor_names !== undefined)
                writer.writeRepeatedString(2, this.field_descriptor_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InterfaceAcceptingMessageDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterfaceAcceptingMessageDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InterfaceAcceptingMessageDescriptor {
            return InterfaceAcceptingMessageDescriptor.deserialize(bytes);
        }
    }
    export class ConfigurationDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            bech32_account_address_prefix?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bech32_account_address_prefix" in data && data.bech32_account_address_prefix != undefined) {
                    this.bech32_account_address_prefix = data.bech32_account_address_prefix;
                }
            }
        }
        get bech32_account_address_prefix() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set bech32_account_address_prefix(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            bech32_account_address_prefix?: string;
        }) {
            const message = new ConfigurationDescriptor({});
            if (data.bech32_account_address_prefix != null) {
                message.bech32_account_address_prefix = data.bech32_account_address_prefix;
            }
            return message;
        }
        toObject() {
            const data: {
                bech32_account_address_prefix?: string;
            } = {};
            if (this.bech32_account_address_prefix != null) {
                data.bech32_account_address_prefix = this.bech32_account_address_prefix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.bech32_account_address_prefix === "string" && this.bech32_account_address_prefix.length)
                writer.writeString(1, this.bech32_account_address_prefix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigurationDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigurationDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bech32_account_address_prefix = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigurationDescriptor {
            return ConfigurationDescriptor.deserialize(bytes);
        }
    }
    export class MsgDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            msg_type_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_type_url" in data && data.msg_type_url != undefined) {
                    this.msg_type_url = data.msg_type_url;
                }
            }
        }
        get msg_type_url() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set msg_type_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            msg_type_url?: string;
        }) {
            const message = new MsgDescriptor({});
            if (data.msg_type_url != null) {
                message.msg_type_url = data.msg_type_url;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_type_url?: string;
            } = {};
            if (this.msg_type_url != null) {
                data.msg_type_url = this.msg_type_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.msg_type_url === "string" && this.msg_type_url.length)
                writer.writeString(1, this.msg_type_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_type_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDescriptor {
            return MsgDescriptor.deserialize(bytes);
        }
    }
    export class GetAuthnDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetAuthnDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuthnDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuthnDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAuthnDescriptorRequest {
            return GetAuthnDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetAuthnDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            authn?: AuthnDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authn" in data && data.authn != undefined) {
                    this.authn = data.authn;
                }
            }
        }
        get authn() {
            return pb_1.Message.getWrapperField(this, AuthnDescriptor, 1) as AuthnDescriptor;
        }
        set authn(value: AuthnDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            authn?: ReturnType<typeof AuthnDescriptor.prototype.toObject>;
        }) {
            const message = new GetAuthnDescriptorResponse({});
            if (data.authn != null) {
                message.authn = AuthnDescriptor.fromObject(data.authn);
            }
            return message;
        }
        toObject() {
            const data: {
                authn?: ReturnType<typeof AuthnDescriptor.prototype.toObject>;
            } = {};
            if (this.authn != null) {
                data.authn = this.authn.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authn !== undefined)
                writer.writeMessage(1, this.authn, () => this.authn.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuthnDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuthnDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.authn, () => message.authn = AuthnDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAuthnDescriptorResponse {
            return GetAuthnDescriptorResponse.deserialize(bytes);
        }
    }
    export class GetChainDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetChainDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChainDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChainDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetChainDescriptorRequest {
            return GetChainDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetChainDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            chain?: ChainDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain" in data && data.chain != undefined) {
                    this.chain = data.chain;
                }
            }
        }
        get chain() {
            return pb_1.Message.getWrapperField(this, ChainDescriptor, 1) as ChainDescriptor;
        }
        set chain(value: ChainDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            chain?: ReturnType<typeof ChainDescriptor.prototype.toObject>;
        }) {
            const message = new GetChainDescriptorResponse({});
            if (data.chain != null) {
                message.chain = ChainDescriptor.fromObject(data.chain);
            }
            return message;
        }
        toObject() {
            const data: {
                chain?: ReturnType<typeof ChainDescriptor.prototype.toObject>;
            } = {};
            if (this.chain != null) {
                data.chain = this.chain.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain !== undefined)
                writer.writeMessage(1, this.chain, () => this.chain.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChainDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChainDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chain, () => message.chain = ChainDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetChainDescriptorResponse {
            return GetChainDescriptorResponse.deserialize(bytes);
        }
    }
    export class GetCodecDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetCodecDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCodecDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCodecDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCodecDescriptorRequest {
            return GetCodecDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetCodecDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            codec?: CodecDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("codec" in data && data.codec != undefined) {
                    this.codec = data.codec;
                }
            }
        }
        get codec() {
            return pb_1.Message.getWrapperField(this, CodecDescriptor, 1) as CodecDescriptor;
        }
        set codec(value: CodecDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            codec?: ReturnType<typeof CodecDescriptor.prototype.toObject>;
        }) {
            const message = new GetCodecDescriptorResponse({});
            if (data.codec != null) {
                message.codec = CodecDescriptor.fromObject(data.codec);
            }
            return message;
        }
        toObject() {
            const data: {
                codec?: ReturnType<typeof CodecDescriptor.prototype.toObject>;
            } = {};
            if (this.codec != null) {
                data.codec = this.codec.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.codec !== undefined)
                writer.writeMessage(1, this.codec, () => this.codec.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCodecDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCodecDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.codec, () => message.codec = CodecDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCodecDescriptorResponse {
            return GetCodecDescriptorResponse.deserialize(bytes);
        }
    }
    export class GetConfigurationDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetConfigurationDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigurationDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigurationDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigurationDescriptorRequest {
            return GetConfigurationDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetConfigurationDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            config?: ConfigurationDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
            }
        }
        get config() {
            return pb_1.Message.getWrapperField(this, ConfigurationDescriptor, 1) as ConfigurationDescriptor;
        }
        set config(value: ConfigurationDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            config?: ReturnType<typeof ConfigurationDescriptor.prototype.toObject>;
        }) {
            const message = new GetConfigurationDescriptorResponse({});
            if (data.config != null) {
                message.config = ConfigurationDescriptor.fromObject(data.config);
            }
            return message;
        }
        toObject() {
            const data: {
                config?: ReturnType<typeof ConfigurationDescriptor.prototype.toObject>;
            } = {};
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config !== undefined)
                writer.writeMessage(1, this.config, () => this.config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigurationDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigurationDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config, () => message.config = ConfigurationDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigurationDescriptorResponse {
            return GetConfigurationDescriptorResponse.deserialize(bytes);
        }
    }
    export class GetQueryServicesDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetQueryServicesDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryServicesDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryServicesDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetQueryServicesDescriptorRequest {
            return GetQueryServicesDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetQueryServicesDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            queries?: QueryServicesDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("queries" in data && data.queries != undefined) {
                    this.queries = data.queries;
                }
            }
        }
        get queries() {
            return pb_1.Message.getWrapperField(this, QueryServicesDescriptor, 1) as QueryServicesDescriptor;
        }
        set queries(value: QueryServicesDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            queries?: ReturnType<typeof QueryServicesDescriptor.prototype.toObject>;
        }) {
            const message = new GetQueryServicesDescriptorResponse({});
            if (data.queries != null) {
                message.queries = QueryServicesDescriptor.fromObject(data.queries);
            }
            return message;
        }
        toObject() {
            const data: {
                queries?: ReturnType<typeof QueryServicesDescriptor.prototype.toObject>;
            } = {};
            if (this.queries != null) {
                data.queries = this.queries.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.queries !== undefined)
                writer.writeMessage(1, this.queries, () => this.queries.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryServicesDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryServicesDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.queries, () => message.queries = QueryServicesDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetQueryServicesDescriptorResponse {
            return GetQueryServicesDescriptorResponse.deserialize(bytes);
        }
    }
    export class GetTxDescriptorRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetTxDescriptorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxDescriptorRequest {
            return GetTxDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetTxDescriptorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            tx?: TxDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
            }
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, TxDescriptor, 1) as TxDescriptor;
        }
        set tx(value: TxDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tx?: ReturnType<typeof TxDescriptor.prototype.toObject>;
        }) {
            const message = new GetTxDescriptorResponse({});
            if (data.tx != null) {
                message.tx = TxDescriptor.fromObject(data.tx);
            }
            return message;
        }
        toObject() {
            const data: {
                tx?: ReturnType<typeof TxDescriptor.prototype.toObject>;
            } = {};
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx !== undefined)
                writer.writeMessage(1, this.tx, () => this.tx.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx, () => message.tx = TxDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxDescriptorResponse {
            return GetTxDescriptorResponse.deserialize(bytes);
        }
    }
    export class QueryServicesDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            query_services?: QueryServiceDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query_services" in data && data.query_services != undefined) {
                    this.query_services = data.query_services;
                }
            }
        }
        get query_services() {
            return pb_1.Message.getRepeatedWrapperField(this, QueryServiceDescriptor, 1) as QueryServiceDescriptor[];
        }
        set query_services(value: QueryServiceDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            query_services?: ReturnType<typeof QueryServiceDescriptor.prototype.toObject>[];
        }) {
            const message = new QueryServicesDescriptor({});
            if (data.query_services != null) {
                message.query_services = data.query_services.map(item => QueryServiceDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                query_services?: ReturnType<typeof QueryServiceDescriptor.prototype.toObject>[];
            } = {};
            if (this.query_services != null) {
                data.query_services = this.query_services.map((item: QueryServiceDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query_services !== undefined)
                writer.writeRepeatedMessage(1, this.query_services, (item: QueryServiceDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryServicesDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryServicesDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.query_services, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QueryServiceDescriptor.deserialize(reader), QueryServiceDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryServicesDescriptor {
            return QueryServicesDescriptor.deserialize(bytes);
        }
    }
    export class QueryServiceDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            fullname?: string;
            is_module?: boolean;
            methods?: QueryMethodDescriptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fullname" in data && data.fullname != undefined) {
                    this.fullname = data.fullname;
                }
                if ("is_module" in data && data.is_module != undefined) {
                    this.is_module = data.is_module;
                }
                if ("methods" in data && data.methods != undefined) {
                    this.methods = data.methods;
                }
            }
        }
        get fullname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set fullname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_module() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_module(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get methods() {
            return pb_1.Message.getRepeatedWrapperField(this, QueryMethodDescriptor, 3) as QueryMethodDescriptor[];
        }
        set methods(value: QueryMethodDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            fullname?: string;
            is_module?: boolean;
            methods?: ReturnType<typeof QueryMethodDescriptor.prototype.toObject>[];
        }) {
            const message = new QueryServiceDescriptor({});
            if (data.fullname != null) {
                message.fullname = data.fullname;
            }
            if (data.is_module != null) {
                message.is_module = data.is_module;
            }
            if (data.methods != null) {
                message.methods = data.methods.map(item => QueryMethodDescriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fullname?: string;
                is_module?: boolean;
                methods?: ReturnType<typeof QueryMethodDescriptor.prototype.toObject>[];
            } = {};
            if (this.fullname != null) {
                data.fullname = this.fullname;
            }
            if (this.is_module != null) {
                data.is_module = this.is_module;
            }
            if (this.methods != null) {
                data.methods = this.methods.map((item: QueryMethodDescriptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.fullname === "string" && this.fullname.length)
                writer.writeString(1, this.fullname);
            if (this.is_module !== undefined)
                writer.writeBool(2, this.is_module);
            if (this.methods !== undefined)
                writer.writeRepeatedMessage(3, this.methods, (item: QueryMethodDescriptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryServiceDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryServiceDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fullname = reader.readString();
                        break;
                    case 2:
                        message.is_module = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.methods, () => pb_1.Message.addToRepeatedWrapperField(message, 3, QueryMethodDescriptor.deserialize(reader), QueryMethodDescriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryServiceDescriptor {
            return QueryServiceDescriptor.deserialize(bytes);
        }
    }
    export class QueryMethodDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            full_query_path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("full_query_path" in data && data.full_query_path != undefined) {
                    this.full_query_path = data.full_query_path;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_query_path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set full_query_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            full_query_path?: string;
        }) {
            const message = new QueryMethodDescriptor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.full_query_path != null) {
                message.full_query_path = data.full_query_path;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                full_query_path?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.full_query_path != null) {
                data.full_query_path = this.full_query_path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.full_query_path === "string" && this.full_query_path.length)
                writer.writeString(2, this.full_query_path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryMethodDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryMethodDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.full_query_path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryMethodDescriptor {
            return QueryMethodDescriptor.deserialize(bytes);
        }
    }
}
