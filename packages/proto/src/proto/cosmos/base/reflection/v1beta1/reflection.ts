// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/base/reflection/v1beta1/reflection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as pb_1 from "google-protobuf";
export namespace cosmos.base.reflection.v1beta1 {
    export class ListAllInterfacesRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new ListAllInterfacesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllInterfacesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllInterfacesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAllInterfacesRequest {
            return ListAllInterfacesRequest.deserialize(bytes);
        }
    }
    export class ListAllInterfacesResponse extends pb_1.Message {
        constructor(data?: any[] | {
            interface_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interface_names" in data && data.interface_names != undefined) {
                    this.interface_names = data.interface_names;
                }
            }
        }
        get interface_names() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set interface_names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            interface_names?: string[];
        }) {
            const message = new ListAllInterfacesResponse({});
            if (data.interface_names != null) {
                message.interface_names = data.interface_names;
            }
            return message;
        }
        toObject() {
            const data: {
                interface_names?: string[];
            } = {};
            if (this.interface_names != null) {
                data.interface_names = this.interface_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interface_names !== undefined)
                writer.writeRepeatedString(1, this.interface_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllInterfacesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllInterfacesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAllInterfacesResponse {
            return ListAllInterfacesResponse.deserialize(bytes);
        }
    }
    export class ListImplementationsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            interface_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interface_name" in data && data.interface_name != undefined) {
                    this.interface_name = data.interface_name;
                }
            }
        }
        get interface_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set interface_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            interface_name?: string;
        }) {
            const message = new ListImplementationsRequest({});
            if (data.interface_name != null) {
                message.interface_name = data.interface_name;
            }
            return message;
        }
        toObject() {
            const data: {
                interface_name?: string;
            } = {};
            if (this.interface_name != null) {
                data.interface_name = this.interface_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.interface_name === "string" && this.interface_name.length)
                writer.writeString(1, this.interface_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImplementationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImplementationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.interface_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImplementationsRequest {
            return ListImplementationsRequest.deserialize(bytes);
        }
    }
    export class ListImplementationsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            implementation_message_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("implementation_message_names" in data && data.implementation_message_names != undefined) {
                    this.implementation_message_names = data.implementation_message_names;
                }
            }
        }
        get implementation_message_names() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set implementation_message_names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            implementation_message_names?: string[];
        }) {
            const message = new ListImplementationsResponse({});
            if (data.implementation_message_names != null) {
                message.implementation_message_names = data.implementation_message_names;
            }
            return message;
        }
        toObject() {
            const data: {
                implementation_message_names?: string[];
            } = {};
            if (this.implementation_message_names != null) {
                data.implementation_message_names = this.implementation_message_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.implementation_message_names !== undefined)
                writer.writeRepeatedString(1, this.implementation_message_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImplementationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImplementationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImplementationsResponse {
            return ListImplementationsResponse.deserialize(bytes);
        }
    }
}
