// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: cosmos/base/tendermint/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/protobuf/any";
import * as dependency_3 from "./../../../../tendermint/p2p/types";
import * as dependency_4 from "./../../../../tendermint/types/block";
import * as dependency_5 from "./../../../../tendermint/types/types";
import * as dependency_6 from "./../../query/v1beta1/pagination";
import * as pb_1 from "google-protobuf";
export namespace cosmos.base.tendermint.v1beta1 {
    export class GetValidatorSetByHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            height?: number;
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new GetValidatorSetByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeInt64(1, this.height);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetValidatorSetByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetValidatorSetByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetValidatorSetByHeightRequest {
            return GetValidatorSetByHeightRequest.deserialize(bytes);
        }
    }
    export class GetValidatorSetByHeightResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block_height?: number;
            validators?: Validator[];
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 2) as Validator[];
        }
        set validators(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageResponse, 3) as dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            block_height?: number;
            validators?: ReturnType<typeof Validator.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new GetValidatorSetByHeightResponse({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => Validator.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                validators?: ReturnType<typeof Validator.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: Validator) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height !== undefined)
                writer.writeInt64(1, this.block_height);
            if (this.validators !== undefined)
                writer.writeRepeatedMessage(2, this.validators, (item: Validator) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetValidatorSetByHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetValidatorSetByHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetValidatorSetByHeightResponse {
            return GetValidatorSetByHeightResponse.deserialize(bytes);
        }
    }
    export class GetLatestValidatorSetRequest extends pb_1.Message {
        constructor(data?: any[] | {
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new GetLatestValidatorSetRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pagination !== undefined)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestValidatorSetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestValidatorSetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestValidatorSetRequest {
            return GetLatestValidatorSetRequest.deserialize(bytes);
        }
    }
    export class GetLatestValidatorSetResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block_height?: number;
            validators?: Validator[];
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 2) as Validator[];
        }
        set validators(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageResponse, 3) as dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            block_height?: number;
            validators?: ReturnType<typeof Validator.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new GetLatestValidatorSetResponse({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => Validator.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                validators?: ReturnType<typeof Validator.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: Validator) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height !== undefined)
                writer.writeInt64(1, this.block_height);
            if (this.validators !== undefined)
                writer.writeRepeatedMessage(2, this.validators, (item: Validator) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestValidatorSetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestValidatorSetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestValidatorSetResponse {
            return GetLatestValidatorSetResponse.deserialize(bytes);
        }
    }
    export class Validator extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
            pub_key?: dependency_1.google.protobuf.Any;
            voting_power?: number;
            proposer_priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("voting_power" in data && data.voting_power != undefined) {
                    this.voting_power = data.voting_power;
                }
                if ("proposer_priority" in data && data.proposer_priority != undefined) {
                    this.proposer_priority = data.proposer_priority;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 2) as dependency_1.google.protobuf.Any;
        }
        set pub_key(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get voting_power() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set voting_power(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get proposer_priority() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set proposer_priority(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            pub_key?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            voting_power?: number;
            proposer_priority?: number;
        }) {
            const message = new Validator({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.pub_key != null) {
                message.pub_key = dependency_1.google.protobuf.Any.fromObject(data.pub_key);
            }
            if (data.voting_power != null) {
                message.voting_power = data.voting_power;
            }
            if (data.proposer_priority != null) {
                message.proposer_priority = data.proposer_priority;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                pub_key?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                voting_power?: number;
                proposer_priority?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key.toObject();
            }
            if (this.voting_power != null) {
                data.voting_power = this.voting_power;
            }
            if (this.proposer_priority != null) {
                data.proposer_priority = this.proposer_priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (this.pub_key !== undefined)
                writer.writeMessage(2, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.voting_power !== undefined)
                writer.writeInt64(3, this.voting_power);
            if (this.proposer_priority !== undefined)
                writer.writeInt64(4, this.proposer_priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pub_key, () => message.pub_key = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        message.voting_power = reader.readInt64();
                        break;
                    case 4:
                        message.proposer_priority = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Validator {
            return Validator.deserialize(bytes);
        }
    }
    export class GetBlockByHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }) {
            const message = new GetBlockByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightRequest {
            return GetBlockByHeightRequest.deserialize(bytes);
        }
    }
    export class GetBlockByHeightResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: dependency_5.tendermint.types.BlockID;
            block?: dependency_4.tendermint.types.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_5.tendermint.types.BlockID, 1) as dependency_5.tendermint.types.BlockID;
        }
        set block_id(value: dependency_5.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.Block, 2) as dependency_4.tendermint.types.Block;
        }
        set block(value: dependency_4.tendermint.types.Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: ReturnType<typeof dependency_5.tendermint.types.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_4.tendermint.types.Block.prototype.toObject>;
        }) {
            const message = new GetBlockByHeightResponse({});
            if (data.block_id != null) {
                message.block_id = dependency_5.tendermint.types.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_4.tendermint.types.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: ReturnType<typeof dependency_5.tendermint.types.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_4.tendermint.types.Block.prototype.toObject>;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.block !== undefined)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_5.tendermint.types.BlockID.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_4.tendermint.types.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightResponse {
            return GetBlockByHeightResponse.deserialize(bytes);
        }
    }
    export class GetLatestBlockRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetLatestBlockRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockRequest {
            return GetLatestBlockRequest.deserialize(bytes);
        }
    }
    export class GetLatestBlockResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: dependency_5.tendermint.types.BlockID;
            block?: dependency_4.tendermint.types.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_5.tendermint.types.BlockID, 1) as dependency_5.tendermint.types.BlockID;
        }
        set block_id(value: dependency_5.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.Block, 2) as dependency_4.tendermint.types.Block;
        }
        set block(value: dependency_4.tendermint.types.Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: ReturnType<typeof dependency_5.tendermint.types.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_4.tendermint.types.Block.prototype.toObject>;
        }) {
            const message = new GetLatestBlockResponse({});
            if (data.block_id != null) {
                message.block_id = dependency_5.tendermint.types.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_4.tendermint.types.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: ReturnType<typeof dependency_5.tendermint.types.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_4.tendermint.types.Block.prototype.toObject>;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.block !== undefined)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_5.tendermint.types.BlockID.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_4.tendermint.types.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockResponse {
            return GetLatestBlockResponse.deserialize(bytes);
        }
    }
    export class GetSyncingRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetSyncingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSyncingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSyncingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSyncingRequest {
            return GetSyncingRequest.deserialize(bytes);
        }
    }
    export class GetSyncingResponse extends pb_1.Message {
        constructor(data?: any[] | {
            syncing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("syncing" in data && data.syncing != undefined) {
                    this.syncing = data.syncing;
                }
            }
        }
        get syncing() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set syncing(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            syncing?: boolean;
        }) {
            const message = new GetSyncingResponse({});
            if (data.syncing != null) {
                message.syncing = data.syncing;
            }
            return message;
        }
        toObject() {
            const data: {
                syncing?: boolean;
            } = {};
            if (this.syncing != null) {
                data.syncing = this.syncing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.syncing !== undefined)
                writer.writeBool(1, this.syncing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSyncingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSyncingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.syncing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSyncingResponse {
            return GetSyncingResponse.deserialize(bytes);
        }
    }
    export class GetNodeInfoRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetNodeInfoRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNodeInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNodeInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNodeInfoRequest {
            return GetNodeInfoRequest.deserialize(bytes);
        }
    }
    export class GetNodeInfoResponse extends pb_1.Message {
        constructor(data?: any[] | {
            default_node_info?: dependency_3.tendermint.p2p.DefaultNodeInfo;
            application_version?: VersionInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("default_node_info" in data && data.default_node_info != undefined) {
                    this.default_node_info = data.default_node_info;
                }
                if ("application_version" in data && data.application_version != undefined) {
                    this.application_version = data.application_version;
                }
            }
        }
        get default_node_info() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.p2p.DefaultNodeInfo, 1) as dependency_3.tendermint.p2p.DefaultNodeInfo;
        }
        set default_node_info(value: dependency_3.tendermint.p2p.DefaultNodeInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get application_version() {
            return pb_1.Message.getWrapperField(this, VersionInfo, 2) as VersionInfo;
        }
        set application_version(value: VersionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            default_node_info?: ReturnType<typeof dependency_3.tendermint.p2p.DefaultNodeInfo.prototype.toObject>;
            application_version?: ReturnType<typeof VersionInfo.prototype.toObject>;
        }) {
            const message = new GetNodeInfoResponse({});
            if (data.default_node_info != null) {
                message.default_node_info = dependency_3.tendermint.p2p.DefaultNodeInfo.fromObject(data.default_node_info);
            }
            if (data.application_version != null) {
                message.application_version = VersionInfo.fromObject(data.application_version);
            }
            return message;
        }
        toObject() {
            const data: {
                default_node_info?: ReturnType<typeof dependency_3.tendermint.p2p.DefaultNodeInfo.prototype.toObject>;
                application_version?: ReturnType<typeof VersionInfo.prototype.toObject>;
            } = {};
            if (this.default_node_info != null) {
                data.default_node_info = this.default_node_info.toObject();
            }
            if (this.application_version != null) {
                data.application_version = this.application_version.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.default_node_info !== undefined)
                writer.writeMessage(1, this.default_node_info, () => this.default_node_info.serialize(writer));
            if (this.application_version !== undefined)
                writer.writeMessage(2, this.application_version, () => this.application_version.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNodeInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNodeInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.default_node_info, () => message.default_node_info = dependency_3.tendermint.p2p.DefaultNodeInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.application_version, () => message.application_version = VersionInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNodeInfoResponse {
            return GetNodeInfoResponse.deserialize(bytes);
        }
    }
    export class VersionInfo extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            app_name?: string;
            version?: string;
            git_commit?: string;
            build_tags?: string;
            go_version?: string;
            build_deps?: Module[];
            cosmos_sdk_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("app_name" in data && data.app_name != undefined) {
                    this.app_name = data.app_name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("git_commit" in data && data.git_commit != undefined) {
                    this.git_commit = data.git_commit;
                }
                if ("build_tags" in data && data.build_tags != undefined) {
                    this.build_tags = data.build_tags;
                }
                if ("go_version" in data && data.go_version != undefined) {
                    this.go_version = data.go_version;
                }
                if ("build_deps" in data && data.build_deps != undefined) {
                    this.build_deps = data.build_deps;
                }
                if ("cosmos_sdk_version" in data && data.cosmos_sdk_version != undefined) {
                    this.cosmos_sdk_version = data.cosmos_sdk_version;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get app_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set app_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get git_commit() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set git_commit(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get build_tags() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set build_tags(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get go_version() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set go_version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get build_deps() {
            return pb_1.Message.getRepeatedWrapperField(this, Module, 7) as Module[];
        }
        set build_deps(value: Module[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get cosmos_sdk_version() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set cosmos_sdk_version(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            app_name?: string;
            version?: string;
            git_commit?: string;
            build_tags?: string;
            go_version?: string;
            build_deps?: ReturnType<typeof Module.prototype.toObject>[];
            cosmos_sdk_version?: string;
        }) {
            const message = new VersionInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.app_name != null) {
                message.app_name = data.app_name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.git_commit != null) {
                message.git_commit = data.git_commit;
            }
            if (data.build_tags != null) {
                message.build_tags = data.build_tags;
            }
            if (data.go_version != null) {
                message.go_version = data.go_version;
            }
            if (data.build_deps != null) {
                message.build_deps = data.build_deps.map(item => Module.fromObject(item));
            }
            if (data.cosmos_sdk_version != null) {
                message.cosmos_sdk_version = data.cosmos_sdk_version;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                app_name?: string;
                version?: string;
                git_commit?: string;
                build_tags?: string;
                go_version?: string;
                build_deps?: ReturnType<typeof Module.prototype.toObject>[];
                cosmos_sdk_version?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.app_name != null) {
                data.app_name = this.app_name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.git_commit != null) {
                data.git_commit = this.git_commit;
            }
            if (this.build_tags != null) {
                data.build_tags = this.build_tags;
            }
            if (this.go_version != null) {
                data.go_version = this.go_version;
            }
            if (this.build_deps != null) {
                data.build_deps = this.build_deps.map((item: Module) => item.toObject());
            }
            if (this.cosmos_sdk_version != null) {
                data.cosmos_sdk_version = this.cosmos_sdk_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.app_name === "string" && this.app_name.length)
                writer.writeString(2, this.app_name);
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(3, this.version);
            if (typeof this.git_commit === "string" && this.git_commit.length)
                writer.writeString(4, this.git_commit);
            if (typeof this.build_tags === "string" && this.build_tags.length)
                writer.writeString(5, this.build_tags);
            if (typeof this.go_version === "string" && this.go_version.length)
                writer.writeString(6, this.go_version);
            if (this.build_deps !== undefined)
                writer.writeRepeatedMessage(7, this.build_deps, (item: Module) => item.serialize(writer));
            if (typeof this.cosmos_sdk_version === "string" && this.cosmos_sdk_version.length)
                writer.writeString(8, this.cosmos_sdk_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.app_name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.git_commit = reader.readString();
                        break;
                    case 5:
                        message.build_tags = reader.readString();
                        break;
                    case 6:
                        message.go_version = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.build_deps, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Module.deserialize(reader), Module));
                        break;
                    case 8:
                        message.cosmos_sdk_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionInfo {
            return VersionInfo.deserialize(bytes);
        }
    }
    export class Module extends pb_1.Message {
        constructor(data?: any[] | {
            path?: string;
            version?: string;
            sum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("sum" in data && data.sum != undefined) {
                    this.sum = data.sum;
                }
            }
        }
        get path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sum() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set sum(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            path?: string;
            version?: string;
            sum?: string;
        }) {
            const message = new Module({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.sum != null) {
                message.sum = data.sum;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                version?: string;
                sum?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.sum != null) {
                data.sum = this.sum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.path === "string" && this.path.length)
                writer.writeString(1, this.path);
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(2, this.version);
            if (typeof this.sum === "string" && this.sum.length)
                writer.writeString(3, this.sum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Module {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Module();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.sum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Module {
            return Module.deserialize(bytes);
        }
    }
}
