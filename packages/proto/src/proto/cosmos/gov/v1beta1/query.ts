// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/gov/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../base/query/v1beta1/pagination";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./gov";
import * as pb_1 from "google-protobuf";
export namespace cosmos.gov.v1beta1 {
    export class QueryProposalRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            proposal_id?: number;
        }) {
            const message = new QueryProposalRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryProposalRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryProposalRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryProposalRequest {
            return QueryProposalRequest.deserialize(bytes);
        }
    }
    export class QueryProposalResponse extends pb_1.Message {
        constructor(data?: any[] | {
            proposal?: dependency_4.cosmos.gov.v1beta1.Proposal;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
            }
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.Proposal, 1) as dependency_4.cosmos.gov.v1beta1.Proposal;
        }
        set proposal(value: dependency_4.cosmos.gov.v1beta1.Proposal) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            proposal?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Proposal.prototype.toObject>;
        }) {
            const message = new QueryProposalResponse({});
            if (data.proposal != null) {
                message.proposal = dependency_4.cosmos.gov.v1beta1.Proposal.fromObject(data.proposal);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Proposal.prototype.toObject>;
            } = {};
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal !== undefined)
                writer.writeMessage(1, this.proposal, () => this.proposal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposal, () => message.proposal = dependency_4.cosmos.gov.v1beta1.Proposal.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryProposalResponse {
            return QueryProposalResponse.deserialize(bytes);
        }
    }
    export class QueryProposalsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_status?: dependency_4.cosmos.gov.v1beta1.ProposalStatus;
            voter?: string;
            depositor?: string;
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_status" in data && data.proposal_status != undefined) {
                    this.proposal_status = data.proposal_status;
                }
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("depositor" in data && data.depositor != undefined) {
                    this.depositor = data.depositor;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get proposal_status() {
            return pb_1.Message.getField(this, 1) as dependency_4.cosmos.gov.v1beta1.ProposalStatus;
        }
        set proposal_status(value: dependency_4.cosmos.gov.v1beta1.ProposalStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get voter() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get depositor() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set depositor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 4) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            proposal_status?: dependency_4.cosmos.gov.v1beta1.ProposalStatus;
            voter?: string;
            depositor?: string;
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryProposalsRequest({});
            if (data.proposal_status != null) {
                message.proposal_status = data.proposal_status;
            }
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.depositor != null) {
                message.depositor = data.depositor;
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_status?: dependency_4.cosmos.gov.v1beta1.ProposalStatus;
                voter?: string;
                depositor?: string;
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.proposal_status != null) {
                data.proposal_status = this.proposal_status;
            }
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.depositor != null) {
                data.depositor = this.depositor;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_status !== undefined)
                writer.writeEnum(1, this.proposal_status);
            if (typeof this.voter === "string" && this.voter.length)
                writer.writeString(2, this.voter);
            if (typeof this.depositor === "string" && this.depositor.length)
                writer.writeString(3, this.depositor);
            if (this.pagination !== undefined)
                writer.writeMessage(4, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryProposalsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryProposalsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_status = reader.readEnum();
                        break;
                    case 2:
                        message.voter = reader.readString();
                        break;
                    case 3:
                        message.depositor = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryProposalsRequest {
            return QueryProposalsRequest.deserialize(bytes);
        }
    }
    export class QueryProposalsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            proposals?: dependency_4.cosmos.gov.v1beta1.Proposal[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposals" in data && data.proposals != undefined) {
                    this.proposals = data.proposals;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get proposals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.gov.v1beta1.Proposal, 1) as dependency_4.cosmos.gov.v1beta1.Proposal[];
        }
        set proposals(value: dependency_4.cosmos.gov.v1beta1.Proposal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            proposals?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Proposal.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryProposalsResponse({});
            if (data.proposals != null) {
                message.proposals = data.proposals.map(item => dependency_4.cosmos.gov.v1beta1.Proposal.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                proposals?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Proposal.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.proposals != null) {
                data.proposals = this.proposals.map((item: dependency_4.cosmos.gov.v1beta1.Proposal) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposals !== undefined)
                writer.writeRepeatedMessage(1, this.proposals, (item: dependency_4.cosmos.gov.v1beta1.Proposal) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryProposalsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryProposalsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.cosmos.gov.v1beta1.Proposal.deserialize(reader), dependency_4.cosmos.gov.v1beta1.Proposal));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryProposalsResponse {
            return QueryProposalsResponse.deserialize(bytes);
        }
    }
    export class QueryVoteRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
            voter?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get voter() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            voter?: string;
        }) {
            const message = new QueryVoteRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.voter != null) {
                message.voter = data.voter;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                voter?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.voter != null) {
                data.voter = this.voter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (typeof this.voter === "string" && this.voter.length)
                writer.writeString(2, this.voter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.voter = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVoteRequest {
            return QueryVoteRequest.deserialize(bytes);
        }
    }
    export class QueryVoteResponse extends pb_1.Message {
        constructor(data?: any[] | {
            vote?: dependency_4.cosmos.gov.v1beta1.Vote;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vote" in data && data.vote != undefined) {
                    this.vote = data.vote;
                }
            }
        }
        get vote() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.Vote, 1) as dependency_4.cosmos.gov.v1beta1.Vote;
        }
        set vote(value: dependency_4.cosmos.gov.v1beta1.Vote) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            vote?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Vote.prototype.toObject>;
        }) {
            const message = new QueryVoteResponse({});
            if (data.vote != null) {
                message.vote = dependency_4.cosmos.gov.v1beta1.Vote.fromObject(data.vote);
            }
            return message;
        }
        toObject() {
            const data: {
                vote?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Vote.prototype.toObject>;
            } = {};
            if (this.vote != null) {
                data.vote = this.vote.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vote !== undefined)
                writer.writeMessage(1, this.vote, () => this.vote.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vote, () => message.vote = dependency_4.cosmos.gov.v1beta1.Vote.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVoteResponse {
            return QueryVoteResponse.deserialize(bytes);
        }
    }
    export class QueryVotesRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryVotesRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVotesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVotesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVotesRequest {
            return QueryVotesRequest.deserialize(bytes);
        }
    }
    export class QueryVotesResponse extends pb_1.Message {
        constructor(data?: any[] | {
            votes?: dependency_4.cosmos.gov.v1beta1.Vote[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get votes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.gov.v1beta1.Vote, 1) as dependency_4.cosmos.gov.v1beta1.Vote[];
        }
        set votes(value: dependency_4.cosmos.gov.v1beta1.Vote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            votes?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Vote.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryVotesResponse({});
            if (data.votes != null) {
                message.votes = data.votes.map(item => dependency_4.cosmos.gov.v1beta1.Vote.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                votes?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Vote.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.votes != null) {
                data.votes = this.votes.map((item: dependency_4.cosmos.gov.v1beta1.Vote) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.votes !== undefined)
                writer.writeRepeatedMessage(1, this.votes, (item: dependency_4.cosmos.gov.v1beta1.Vote) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVotesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVotesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.votes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.cosmos.gov.v1beta1.Vote.deserialize(reader), dependency_4.cosmos.gov.v1beta1.Vote));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVotesResponse {
            return QueryVotesResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            params_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params_type" in data && data.params_type != undefined) {
                    this.params_type = data.params_type;
                }
            }
        }
        get params_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set params_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            params_type?: string;
        }) {
            const message = new QueryParamsRequest({});
            if (data.params_type != null) {
                message.params_type = data.params_type;
            }
            return message;
        }
        toObject() {
            const data: {
                params_type?: string;
            } = {};
            if (this.params_type != null) {
                data.params_type = this.params_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.params_type === "string" && this.params_type.length)
                writer.writeString(1, this.params_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.params_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            voting_params?: dependency_4.cosmos.gov.v1beta1.VotingParams;
            deposit_params?: dependency_4.cosmos.gov.v1beta1.DepositParams;
            tally_params?: dependency_4.cosmos.gov.v1beta1.TallyParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voting_params" in data && data.voting_params != undefined) {
                    this.voting_params = data.voting_params;
                }
                if ("deposit_params" in data && data.deposit_params != undefined) {
                    this.deposit_params = data.deposit_params;
                }
                if ("tally_params" in data && data.tally_params != undefined) {
                    this.tally_params = data.tally_params;
                }
            }
        }
        get voting_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.VotingParams, 1) as dependency_4.cosmos.gov.v1beta1.VotingParams;
        }
        set voting_params(value: dependency_4.cosmos.gov.v1beta1.VotingParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get deposit_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.DepositParams, 2) as dependency_4.cosmos.gov.v1beta1.DepositParams;
        }
        set deposit_params(value: dependency_4.cosmos.gov.v1beta1.DepositParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get tally_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.TallyParams, 3) as dependency_4.cosmos.gov.v1beta1.TallyParams;
        }
        set tally_params(value: dependency_4.cosmos.gov.v1beta1.TallyParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            voting_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.VotingParams.prototype.toObject>;
            deposit_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.DepositParams.prototype.toObject>;
            tally_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.TallyParams.prototype.toObject>;
        }) {
            const message = new QueryParamsResponse({});
            if (data.voting_params != null) {
                message.voting_params = dependency_4.cosmos.gov.v1beta1.VotingParams.fromObject(data.voting_params);
            }
            if (data.deposit_params != null) {
                message.deposit_params = dependency_4.cosmos.gov.v1beta1.DepositParams.fromObject(data.deposit_params);
            }
            if (data.tally_params != null) {
                message.tally_params = dependency_4.cosmos.gov.v1beta1.TallyParams.fromObject(data.tally_params);
            }
            return message;
        }
        toObject() {
            const data: {
                voting_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.VotingParams.prototype.toObject>;
                deposit_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.DepositParams.prototype.toObject>;
                tally_params?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.TallyParams.prototype.toObject>;
            } = {};
            if (this.voting_params != null) {
                data.voting_params = this.voting_params.toObject();
            }
            if (this.deposit_params != null) {
                data.deposit_params = this.deposit_params.toObject();
            }
            if (this.tally_params != null) {
                data.tally_params = this.tally_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voting_params !== undefined)
                writer.writeMessage(1, this.voting_params, () => this.voting_params.serialize(writer));
            if (this.deposit_params !== undefined)
                writer.writeMessage(2, this.deposit_params, () => this.deposit_params.serialize(writer));
            if (this.tally_params !== undefined)
                writer.writeMessage(3, this.tally_params, () => this.tally_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.voting_params, () => message.voting_params = dependency_4.cosmos.gov.v1beta1.VotingParams.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.deposit_params, () => message.deposit_params = dependency_4.cosmos.gov.v1beta1.DepositParams.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.tally_params, () => message.tally_params = dependency_4.cosmos.gov.v1beta1.TallyParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryDepositRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
            depositor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("depositor" in data && data.depositor != undefined) {
                    this.depositor = data.depositor;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get depositor() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set depositor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            depositor?: string;
        }) {
            const message = new QueryDepositRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.depositor != null) {
                message.depositor = data.depositor;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                depositor?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.depositor != null) {
                data.depositor = this.depositor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (typeof this.depositor === "string" && this.depositor.length)
                writer.writeString(2, this.depositor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.depositor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositRequest {
            return QueryDepositRequest.deserialize(bytes);
        }
    }
    export class QueryDepositResponse extends pb_1.Message {
        constructor(data?: any[] | {
            deposit?: dependency_4.cosmos.gov.v1beta1.Deposit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deposit" in data && data.deposit != undefined) {
                    this.deposit = data.deposit;
                }
            }
        }
        get deposit() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.Deposit, 1) as dependency_4.cosmos.gov.v1beta1.Deposit;
        }
        set deposit(value: dependency_4.cosmos.gov.v1beta1.Deposit) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            deposit?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Deposit.prototype.toObject>;
        }) {
            const message = new QueryDepositResponse({});
            if (data.deposit != null) {
                message.deposit = dependency_4.cosmos.gov.v1beta1.Deposit.fromObject(data.deposit);
            }
            return message;
        }
        toObject() {
            const data: {
                deposit?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Deposit.prototype.toObject>;
            } = {};
            if (this.deposit != null) {
                data.deposit = this.deposit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deposit !== undefined)
                writer.writeMessage(1, this.deposit, () => this.deposit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.deposit, () => message.deposit = dependency_4.cosmos.gov.v1beta1.Deposit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositResponse {
            return QueryDepositResponse.deserialize(bytes);
        }
    }
    export class QueryDepositsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryDepositsRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositsRequest {
            return QueryDepositsRequest.deserialize(bytes);
        }
    }
    export class QueryDepositsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            deposits?: dependency_4.cosmos.gov.v1beta1.Deposit[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deposits" in data && data.deposits != undefined) {
                    this.deposits = data.deposits;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get deposits() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.gov.v1beta1.Deposit, 1) as dependency_4.cosmos.gov.v1beta1.Deposit[];
        }
        set deposits(value: dependency_4.cosmos.gov.v1beta1.Deposit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            deposits?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Deposit.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryDepositsResponse({});
            if (data.deposits != null) {
                message.deposits = data.deposits.map(item => dependency_4.cosmos.gov.v1beta1.Deposit.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                deposits?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.Deposit.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.deposits != null) {
                data.deposits = this.deposits.map((item: dependency_4.cosmos.gov.v1beta1.Deposit) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deposits !== undefined)
                writer.writeRepeatedMessage(1, this.deposits, (item: dependency_4.cosmos.gov.v1beta1.Deposit) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.deposits, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.cosmos.gov.v1beta1.Deposit.deserialize(reader), dependency_4.cosmos.gov.v1beta1.Deposit));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositsResponse {
            return QueryDepositsResponse.deserialize(bytes);
        }
    }
    export class QueryTallyResultRequest extends pb_1.Message {
        constructor(data?: any[] | {
            proposal_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            proposal_id?: number;
        }) {
            const message = new QueryTallyResultRequest({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id !== undefined)
                writer.writeUint64(1, this.proposal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTallyResultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTallyResultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTallyResultRequest {
            return QueryTallyResultRequest.deserialize(bytes);
        }
    }
    export class QueryTallyResultResponse extends pb_1.Message {
        constructor(data?: any[] | {
            tally?: dependency_4.cosmos.gov.v1beta1.TallyResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tally" in data && data.tally != undefined) {
                    this.tally = data.tally;
                }
            }
        }
        get tally() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.gov.v1beta1.TallyResult, 1) as dependency_4.cosmos.gov.v1beta1.TallyResult;
        }
        set tally(value: dependency_4.cosmos.gov.v1beta1.TallyResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tally?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.TallyResult.prototype.toObject>;
        }) {
            const message = new QueryTallyResultResponse({});
            if (data.tally != null) {
                message.tally = dependency_4.cosmos.gov.v1beta1.TallyResult.fromObject(data.tally);
            }
            return message;
        }
        toObject() {
            const data: {
                tally?: ReturnType<typeof dependency_4.cosmos.gov.v1beta1.TallyResult.prototype.toObject>;
            } = {};
            if (this.tally != null) {
                data.tally = this.tally.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tally !== undefined)
                writer.writeMessage(1, this.tally, () => this.tally.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTallyResultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTallyResultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tally, () => message.tally = dependency_4.cosmos.gov.v1beta1.TallyResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTallyResultResponse {
            return QueryTallyResultResponse.deserialize(bytes);
        }
    }
}
