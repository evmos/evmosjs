// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: cosmos/distribution/v1beta1/distribution.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace cosmos.distribution.v1beta1 {
    export class Params extends pb_1.Message {
        constructor(data?: any[] | {
            community_tax?: string;
            base_proposer_reward?: string;
            bonus_proposer_reward?: string;
            withdraw_addr_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("community_tax" in data && data.community_tax != undefined) {
                    this.community_tax = data.community_tax;
                }
                if ("base_proposer_reward" in data && data.base_proposer_reward != undefined) {
                    this.base_proposer_reward = data.base_proposer_reward;
                }
                if ("bonus_proposer_reward" in data && data.bonus_proposer_reward != undefined) {
                    this.bonus_proposer_reward = data.bonus_proposer_reward;
                }
                if ("withdraw_addr_enabled" in data && data.withdraw_addr_enabled != undefined) {
                    this.withdraw_addr_enabled = data.withdraw_addr_enabled;
                }
            }
        }
        get community_tax() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set community_tax(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get base_proposer_reward() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set base_proposer_reward(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get bonus_proposer_reward() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set bonus_proposer_reward(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get withdraw_addr_enabled() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set withdraw_addr_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            community_tax?: string;
            base_proposer_reward?: string;
            bonus_proposer_reward?: string;
            withdraw_addr_enabled?: boolean;
        }) {
            const message = new Params({});
            if (data.community_tax != null) {
                message.community_tax = data.community_tax;
            }
            if (data.base_proposer_reward != null) {
                message.base_proposer_reward = data.base_proposer_reward;
            }
            if (data.bonus_proposer_reward != null) {
                message.bonus_proposer_reward = data.bonus_proposer_reward;
            }
            if (data.withdraw_addr_enabled != null) {
                message.withdraw_addr_enabled = data.withdraw_addr_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                community_tax?: string;
                base_proposer_reward?: string;
                bonus_proposer_reward?: string;
                withdraw_addr_enabled?: boolean;
            } = {};
            if (this.community_tax != null) {
                data.community_tax = this.community_tax;
            }
            if (this.base_proposer_reward != null) {
                data.base_proposer_reward = this.base_proposer_reward;
            }
            if (this.bonus_proposer_reward != null) {
                data.bonus_proposer_reward = this.bonus_proposer_reward;
            }
            if (this.withdraw_addr_enabled != null) {
                data.withdraw_addr_enabled = this.withdraw_addr_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.community_tax === "string" && this.community_tax.length)
                writer.writeString(1, this.community_tax);
            if (typeof this.base_proposer_reward === "string" && this.base_proposer_reward.length)
                writer.writeString(2, this.base_proposer_reward);
            if (typeof this.bonus_proposer_reward === "string" && this.bonus_proposer_reward.length)
                writer.writeString(3, this.bonus_proposer_reward);
            if (this.withdraw_addr_enabled !== undefined)
                writer.writeBool(4, this.withdraw_addr_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.community_tax = reader.readString();
                        break;
                    case 2:
                        message.base_proposer_reward = reader.readString();
                        break;
                    case 3:
                        message.bonus_proposer_reward = reader.readString();
                        break;
                    case 4:
                        message.withdraw_addr_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
    export class ValidatorHistoricalRewards extends pb_1.Message {
        constructor(data?: any[] | {
            cumulative_reward_ratio?: dependency_2.cosmos.base.v1beta1.DecCoin[];
            reference_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cumulative_reward_ratio" in data && data.cumulative_reward_ratio != undefined) {
                    this.cumulative_reward_ratio = data.cumulative_reward_ratio;
                }
                if ("reference_count" in data && data.reference_count != undefined) {
                    this.reference_count = data.reference_count;
                }
            }
        }
        get cumulative_reward_ratio() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 1) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set cumulative_reward_ratio(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get reference_count() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set reference_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            cumulative_reward_ratio?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            reference_count?: number;
        }) {
            const message = new ValidatorHistoricalRewards({});
            if (data.cumulative_reward_ratio != null) {
                message.cumulative_reward_ratio = data.cumulative_reward_ratio.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            if (data.reference_count != null) {
                message.reference_count = data.reference_count;
            }
            return message;
        }
        toObject() {
            const data: {
                cumulative_reward_ratio?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
                reference_count?: number;
            } = {};
            if (this.cumulative_reward_ratio != null) {
                data.cumulative_reward_ratio = this.cumulative_reward_ratio.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            if (this.reference_count != null) {
                data.reference_count = this.reference_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cumulative_reward_ratio !== undefined)
                writer.writeRepeatedMessage(1, this.cumulative_reward_ratio, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (this.reference_count !== undefined)
                writer.writeUint32(2, this.reference_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorHistoricalRewards {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorHistoricalRewards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cumulative_reward_ratio, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    case 2:
                        message.reference_count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorHistoricalRewards {
            return ValidatorHistoricalRewards.deserialize(bytes);
        }
    }
    export class ValidatorCurrentRewards extends pb_1.Message {
        constructor(data?: any[] | {
            rewards?: dependency_2.cosmos.base.v1beta1.DecCoin[];
            period?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rewards" in data && data.rewards != undefined) {
                    this.rewards = data.rewards;
                }
                if ("period" in data && data.period != undefined) {
                    this.period = data.period;
                }
            }
        }
        get rewards() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 1) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set rewards(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get period() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set period(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rewards?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            period?: number;
        }) {
            const message = new ValidatorCurrentRewards({});
            if (data.rewards != null) {
                message.rewards = data.rewards.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            if (data.period != null) {
                message.period = data.period;
            }
            return message;
        }
        toObject() {
            const data: {
                rewards?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
                period?: number;
            } = {};
            if (this.rewards != null) {
                data.rewards = this.rewards.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            if (this.period != null) {
                data.period = this.period;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rewards !== undefined)
                writer.writeRepeatedMessage(1, this.rewards, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (this.period !== undefined)
                writer.writeUint64(2, this.period);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorCurrentRewards {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorCurrentRewards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rewards, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    case 2:
                        message.period = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorCurrentRewards {
            return ValidatorCurrentRewards.deserialize(bytes);
        }
    }
    export class ValidatorAccumulatedCommission extends pb_1.Message {
        constructor(data?: any[] | {
            commission?: dependency_2.cosmos.base.v1beta1.DecCoin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commission" in data && data.commission != undefined) {
                    this.commission = data.commission;
                }
            }
        }
        get commission() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 1) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set commission(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            commission?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
        }) {
            const message = new ValidatorAccumulatedCommission({});
            if (data.commission != null) {
                message.commission = data.commission.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                commission?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            } = {};
            if (this.commission != null) {
                data.commission = this.commission.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commission !== undefined)
                writer.writeRepeatedMessage(1, this.commission, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorAccumulatedCommission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorAccumulatedCommission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.commission, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorAccumulatedCommission {
            return ValidatorAccumulatedCommission.deserialize(bytes);
        }
    }
    export class ValidatorOutstandingRewards extends pb_1.Message {
        constructor(data?: any[] | {
            rewards?: dependency_2.cosmos.base.v1beta1.DecCoin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rewards" in data && data.rewards != undefined) {
                    this.rewards = data.rewards;
                }
            }
        }
        get rewards() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 1) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set rewards(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            rewards?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
        }) {
            const message = new ValidatorOutstandingRewards({});
            if (data.rewards != null) {
                message.rewards = data.rewards.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                rewards?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            } = {};
            if (this.rewards != null) {
                data.rewards = this.rewards.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rewards !== undefined)
                writer.writeRepeatedMessage(1, this.rewards, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorOutstandingRewards {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorOutstandingRewards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rewards, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorOutstandingRewards {
            return ValidatorOutstandingRewards.deserialize(bytes);
        }
    }
    export class ValidatorSlashEvent extends pb_1.Message {
        constructor(data?: any[] | {
            validator_period?: number;
            fraction?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_period" in data && data.validator_period != undefined) {
                    this.validator_period = data.validator_period;
                }
                if ("fraction" in data && data.fraction != undefined) {
                    this.fraction = data.fraction;
                }
            }
        }
        get validator_period() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set validator_period(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fraction() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set fraction(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator_period?: number;
            fraction?: string;
        }) {
            const message = new ValidatorSlashEvent({});
            if (data.validator_period != null) {
                message.validator_period = data.validator_period;
            }
            if (data.fraction != null) {
                message.fraction = data.fraction;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_period?: number;
                fraction?: string;
            } = {};
            if (this.validator_period != null) {
                data.validator_period = this.validator_period;
            }
            if (this.fraction != null) {
                data.fraction = this.fraction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_period !== undefined)
                writer.writeUint64(1, this.validator_period);
            if (typeof this.fraction === "string" && this.fraction.length)
                writer.writeString(2, this.fraction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorSlashEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorSlashEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_period = reader.readUint64();
                        break;
                    case 2:
                        message.fraction = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorSlashEvent {
            return ValidatorSlashEvent.deserialize(bytes);
        }
    }
    export class ValidatorSlashEvents extends pb_1.Message {
        constructor(data?: any[] | {
            validator_slash_events?: ValidatorSlashEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_slash_events" in data && data.validator_slash_events != undefined) {
                    this.validator_slash_events = data.validator_slash_events;
                }
            }
        }
        get validator_slash_events() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidatorSlashEvent, 1) as ValidatorSlashEvent[];
        }
        set validator_slash_events(value: ValidatorSlashEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            validator_slash_events?: ReturnType<typeof ValidatorSlashEvent.prototype.toObject>[];
        }) {
            const message = new ValidatorSlashEvents({});
            if (data.validator_slash_events != null) {
                message.validator_slash_events = data.validator_slash_events.map(item => ValidatorSlashEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator_slash_events?: ReturnType<typeof ValidatorSlashEvent.prototype.toObject>[];
            } = {};
            if (this.validator_slash_events != null) {
                data.validator_slash_events = this.validator_slash_events.map((item: ValidatorSlashEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_slash_events !== undefined)
                writer.writeRepeatedMessage(1, this.validator_slash_events, (item: ValidatorSlashEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorSlashEvents {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorSlashEvents();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validator_slash_events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ValidatorSlashEvent.deserialize(reader), ValidatorSlashEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorSlashEvents {
            return ValidatorSlashEvents.deserialize(bytes);
        }
    }
    export class FeePool extends pb_1.Message {
        constructor(data?: any[] | {
            community_pool?: dependency_2.cosmos.base.v1beta1.DecCoin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("community_pool" in data && data.community_pool != undefined) {
                    this.community_pool = data.community_pool;
                }
            }
        }
        get community_pool() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 1) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set community_pool(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            community_pool?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
        }) {
            const message = new FeePool({});
            if (data.community_pool != null) {
                message.community_pool = data.community_pool.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                community_pool?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            } = {};
            if (this.community_pool != null) {
                data.community_pool = this.community_pool.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.community_pool !== undefined)
                writer.writeRepeatedMessage(1, this.community_pool, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeePool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeePool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.community_pool, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeePool {
            return FeePool.deserialize(bytes);
        }
    }
    export class CommunityPoolSpendProposal extends pb_1.Message {
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            recipient?: string;
            amount?: dependency_2.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get title() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 4) as dependency_2.cosmos.base.v1beta1.Coin[];
        }
        set amount(value: dependency_2.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            recipient?: string;
            amount?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }) {
            const message = new CommunityPoolSpendProposal({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.amount != null) {
                message.amount = data.amount.map(item => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                recipient?: string;
                amount?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.amount != null) {
                data.amount = this.amount.map((item: dependency_2.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.title === "string" && this.title.length)
                writer.writeString(1, this.title);
            if (typeof this.description === "string" && this.description.length)
                writer.writeString(2, this.description);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(3, this.recipient);
            if (this.amount !== undefined)
                writer.writeRepeatedMessage(4, this.amount, (item: dependency_2.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommunityPoolSpendProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommunityPoolSpendProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.recipient = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommunityPoolSpendProposal {
            return CommunityPoolSpendProposal.deserialize(bytes);
        }
    }
    export class DelegatorStartingInfo extends pb_1.Message {
        constructor(data?: any[] | {
            previous_period?: number;
            stake?: string;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_period" in data && data.previous_period != undefined) {
                    this.previous_period = data.previous_period;
                }
                if ("stake" in data && data.stake != undefined) {
                    this.stake = data.stake;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get previous_period() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set previous_period(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get stake() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set stake(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            previous_period?: number;
            stake?: string;
            height?: number;
        }) {
            const message = new DelegatorStartingInfo({});
            if (data.previous_period != null) {
                message.previous_period = data.previous_period;
            }
            if (data.stake != null) {
                message.stake = data.stake;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                previous_period?: number;
                stake?: string;
                height?: number;
            } = {};
            if (this.previous_period != null) {
                data.previous_period = this.previous_period;
            }
            if (this.stake != null) {
                data.stake = this.stake;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.previous_period !== undefined)
                writer.writeUint64(1, this.previous_period);
            if (typeof this.stake === "string" && this.stake.length)
                writer.writeString(2, this.stake);
            if (this.height !== undefined)
                writer.writeUint64(3, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegatorStartingInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegatorStartingInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.previous_period = reader.readUint64();
                        break;
                    case 2:
                        message.stake = reader.readString();
                        break;
                    case 3:
                        message.height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegatorStartingInfo {
            return DelegatorStartingInfo.deserialize(bytes);
        }
    }
    export class DelegationDelegatorReward extends pb_1.Message {
        constructor(data?: any[] | {
            validator_address?: string;
            reward?: dependency_2.cosmos.base.v1beta1.DecCoin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("reward" in data && data.reward != undefined) {
                    this.reward = data.reward;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reward() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.DecCoin, 2) as dependency_2.cosmos.base.v1beta1.DecCoin[];
        }
        set reward(value: dependency_2.cosmos.base.v1beta1.DecCoin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            validator_address?: string;
            reward?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
        }) {
            const message = new DelegationDelegatorReward({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.reward != null) {
                message.reward = data.reward.map(item => dependency_2.cosmos.base.v1beta1.DecCoin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
                reward?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.DecCoin.prototype.toObject>[];
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.reward != null) {
                data.reward = this.reward.map((item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (this.reward !== undefined)
                writer.writeRepeatedMessage(2, this.reward, (item: dependency_2.cosmos.base.v1beta1.DecCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegationDelegatorReward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegationDelegatorReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.reward, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.cosmos.base.v1beta1.DecCoin.deserialize(reader), dependency_2.cosmos.base.v1beta1.DecCoin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegationDelegatorReward {
            return DelegationDelegatorReward.deserialize(bytes);
        }
    }
    export class CommunityPoolSpendProposalWithDeposit extends pb_1.Message {
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            recipient?: string;
            amount?: string;
            deposit?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("deposit" in data && data.deposit != undefined) {
                    this.deposit = data.deposit;
                }
            }
        }
        get title() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get deposit() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set deposit(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            recipient?: string;
            amount?: string;
            deposit?: string;
        }) {
            const message = new CommunityPoolSpendProposalWithDeposit({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.deposit != null) {
                message.deposit = data.deposit;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                recipient?: string;
                amount?: string;
                deposit?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.deposit != null) {
                data.deposit = this.deposit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.title === "string" && this.title.length)
                writer.writeString(1, this.title);
            if (typeof this.description === "string" && this.description.length)
                writer.writeString(2, this.description);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(3, this.recipient);
            if (typeof this.amount === "string" && this.amount.length)
                writer.writeString(4, this.amount);
            if (typeof this.deposit === "string" && this.deposit.length)
                writer.writeString(5, this.deposit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommunityPoolSpendProposalWithDeposit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommunityPoolSpendProposalWithDeposit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.recipient = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readString();
                        break;
                    case 5:
                        message.deposit = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommunityPoolSpendProposalWithDeposit {
            return CommunityPoolSpendProposalWithDeposit.deserialize(bytes);
        }
    }
}
