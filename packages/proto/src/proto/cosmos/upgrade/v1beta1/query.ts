// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: cosmos/upgrade/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_2 from "./upgrade";
import * as pb_1 from "google-protobuf";
export namespace cosmos.upgrade.v1beta1 {
    export class QueryCurrentPlanRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new QueryCurrentPlanRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentPlanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentPlanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentPlanRequest {
            return QueryCurrentPlanRequest.deserialize(bytes);
        }
    }
    export class QueryCurrentPlanResponse extends pb_1.Message {
        constructor(data?: any[] | {
            plan?: dependency_2.cosmos.upgrade.v1beta1.Plan;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("plan" in data && data.plan != undefined) {
                    this.plan = data.plan;
                }
            }
        }
        get plan() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.upgrade.v1beta1.Plan, 1) as dependency_2.cosmos.upgrade.v1beta1.Plan;
        }
        set plan(value: dependency_2.cosmos.upgrade.v1beta1.Plan) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            plan?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.Plan.prototype.toObject>;
        }) {
            const message = new QueryCurrentPlanResponse({});
            if (data.plan != null) {
                message.plan = dependency_2.cosmos.upgrade.v1beta1.Plan.fromObject(data.plan);
            }
            return message;
        }
        toObject() {
            const data: {
                plan?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.Plan.prototype.toObject>;
            } = {};
            if (this.plan != null) {
                data.plan = this.plan.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.plan !== undefined)
                writer.writeMessage(1, this.plan, () => this.plan.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentPlanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentPlanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.plan, () => message.plan = dependency_2.cosmos.upgrade.v1beta1.Plan.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentPlanResponse {
            return QueryCurrentPlanResponse.deserialize(bytes);
        }
    }
    export class QueryAppliedPlanRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }) {
            const message = new QueryAppliedPlanRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAppliedPlanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAppliedPlanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAppliedPlanRequest {
            return QueryAppliedPlanRequest.deserialize(bytes);
        }
    }
    export class QueryAppliedPlanResponse extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }) {
            const message = new QueryAppliedPlanResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAppliedPlanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAppliedPlanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAppliedPlanResponse {
            return QueryAppliedPlanResponse.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class QueryUpgradedConsensusStateRequest extends pb_1.Message {
        constructor(data?: any[] | {
            last_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_height" in data && data.last_height != undefined) {
                    this.last_height = data.last_height;
                }
            }
        }
        get last_height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set last_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            last_height?: number;
        }) {
            const message = new QueryUpgradedConsensusStateRequest({});
            if (data.last_height != null) {
                message.last_height = data.last_height;
            }
            return message;
        }
        toObject() {
            const data: {
                last_height?: number;
            } = {};
            if (this.last_height != null) {
                data.last_height = this.last_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_height !== undefined)
                writer.writeInt64(1, this.last_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUpgradedConsensusStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUpgradedConsensusStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUpgradedConsensusStateRequest {
            return QueryUpgradedConsensusStateRequest.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class QueryUpgradedConsensusStateResponse extends pb_1.Message {
        constructor(data?: any[] | {
            upgraded_consensus_state?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("upgraded_consensus_state" in data && data.upgraded_consensus_state != undefined) {
                    this.upgraded_consensus_state = data.upgraded_consensus_state;
                }
            }
        }
        get upgraded_consensus_state() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set upgraded_consensus_state(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            upgraded_consensus_state?: Uint8Array;
        }) {
            const message = new QueryUpgradedConsensusStateResponse({});
            if (data.upgraded_consensus_state != null) {
                message.upgraded_consensus_state = data.upgraded_consensus_state;
            }
            return message;
        }
        toObject() {
            const data: {
                upgraded_consensus_state?: Uint8Array;
            } = {};
            if (this.upgraded_consensus_state != null) {
                data.upgraded_consensus_state = this.upgraded_consensus_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.upgraded_consensus_state !== undefined)
                writer.writeBytes(2, this.upgraded_consensus_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUpgradedConsensusStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUpgradedConsensusStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.upgraded_consensus_state = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUpgradedConsensusStateResponse {
            return QueryUpgradedConsensusStateResponse.deserialize(bytes);
        }
    }
    export class QueryModuleVersionsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            module_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_name" in data && data.module_name != undefined) {
                    this.module_name = data.module_name;
                }
            }
        }
        get module_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set module_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            module_name?: string;
        }) {
            const message = new QueryModuleVersionsRequest({});
            if (data.module_name != null) {
                message.module_name = data.module_name;
            }
            return message;
        }
        toObject() {
            const data: {
                module_name?: string;
            } = {};
            if (this.module_name != null) {
                data.module_name = this.module_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.module_name === "string" && this.module_name.length)
                writer.writeString(1, this.module_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryModuleVersionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryModuleVersionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryModuleVersionsRequest {
            return QueryModuleVersionsRequest.deserialize(bytes);
        }
    }
    export class QueryModuleVersionsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            module_versions?: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_versions" in data && data.module_versions != undefined) {
                    this.module_versions = data.module_versions;
                }
            }
        }
        get module_versions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.upgrade.v1beta1.ModuleVersion, 1) as dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[];
        }
        set module_versions(value: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            module_versions?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.prototype.toObject>[];
        }) {
            const message = new QueryModuleVersionsResponse({});
            if (data.module_versions != null) {
                message.module_versions = data.module_versions.map(item => dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                module_versions?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.prototype.toObject>[];
            } = {};
            if (this.module_versions != null) {
                data.module_versions = this.module_versions.map((item: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module_versions !== undefined)
                writer.writeRepeatedMessage(1, this.module_versions, (item: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryModuleVersionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryModuleVersionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.module_versions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.deserialize(reader), dependency_2.cosmos.upgrade.v1beta1.ModuleVersion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryModuleVersionsResponse {
            return QueryModuleVersionsResponse.deserialize(bytes);
        }
    }
}
