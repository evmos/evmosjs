// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: ethermint/evm/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./evm";
import * as dependency_5 from "./tx";
import * as pb_1 from "google-protobuf";
export namespace ethermint.evm.v1 {
    export class QueryAccountRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }) {
            const message = new QueryAccountRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAccountRequest {
            return QueryAccountRequest.deserialize(bytes);
        }
    }
    export class QueryAccountResponse extends pb_1.Message {
        constructor(data?: any[] | {
            balance?: string;
            code_hash?: string;
            nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("code_hash" in data && data.code_hash != undefined) {
                    this.code_hash = data.code_hash;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get balance() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set balance(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code_hash() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set code_hash(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nonce() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            balance?: string;
            code_hash?: string;
            nonce?: number;
        }) {
            const message = new QueryAccountResponse({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.code_hash != null) {
                message.code_hash = data.code_hash;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: string;
                code_hash?: string;
                nonce?: number;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.code_hash != null) {
                data.code_hash = this.code_hash;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.balance === "string" && this.balance.length)
                writer.writeString(1, this.balance);
            if (typeof this.code_hash === "string" && this.code_hash.length)
                writer.writeString(2, this.code_hash);
            if (this.nonce !== undefined)
                writer.writeUint64(3, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balance = reader.readString();
                        break;
                    case 2:
                        message.code_hash = reader.readString();
                        break;
                    case 3:
                        message.nonce = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAccountResponse {
            return QueryAccountResponse.deserialize(bytes);
        }
    }
    export class QueryCosmosAccountRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }) {
            const message = new QueryCosmosAccountRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCosmosAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCosmosAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCosmosAccountRequest {
            return QueryCosmosAccountRequest.deserialize(bytes);
        }
    }
    export class QueryCosmosAccountResponse extends pb_1.Message {
        constructor(data?: any[] | {
            cosmos_address?: string;
            sequence?: number;
            account_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cosmos_address" in data && data.cosmos_address != undefined) {
                    this.cosmos_address = data.cosmos_address;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
                if ("account_number" in data && data.account_number != undefined) {
                    this.account_number = data.account_number;
                }
            }
        }
        get cosmos_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set cosmos_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get account_number() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set account_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            cosmos_address?: string;
            sequence?: number;
            account_number?: number;
        }) {
            const message = new QueryCosmosAccountResponse({});
            if (data.cosmos_address != null) {
                message.cosmos_address = data.cosmos_address;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            if (data.account_number != null) {
                message.account_number = data.account_number;
            }
            return message;
        }
        toObject() {
            const data: {
                cosmos_address?: string;
                sequence?: number;
                account_number?: number;
            } = {};
            if (this.cosmos_address != null) {
                data.cosmos_address = this.cosmos_address;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            if (this.account_number != null) {
                data.account_number = this.account_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.cosmos_address === "string" && this.cosmos_address.length)
                writer.writeString(1, this.cosmos_address);
            if (this.sequence !== undefined)
                writer.writeUint64(2, this.sequence);
            if (this.account_number !== undefined)
                writer.writeUint64(3, this.account_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCosmosAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCosmosAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cosmos_address = reader.readString();
                        break;
                    case 2:
                        message.sequence = reader.readUint64();
                        break;
                    case 3:
                        message.account_number = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCosmosAccountResponse {
            return QueryCosmosAccountResponse.deserialize(bytes);
        }
    }
    export class QueryValidatorAccountRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cons_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cons_address" in data && data.cons_address != undefined) {
                    this.cons_address = data.cons_address;
                }
            }
        }
        get cons_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set cons_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cons_address?: string;
        }) {
            const message = new QueryValidatorAccountRequest({});
            if (data.cons_address != null) {
                message.cons_address = data.cons_address;
            }
            return message;
        }
        toObject() {
            const data: {
                cons_address?: string;
            } = {};
            if (this.cons_address != null) {
                data.cons_address = this.cons_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.cons_address === "string" && this.cons_address.length)
                writer.writeString(1, this.cons_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cons_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorAccountRequest {
            return QueryValidatorAccountRequest.deserialize(bytes);
        }
    }
    export class QueryValidatorAccountResponse extends pb_1.Message {
        constructor(data?: any[] | {
            account_address?: string;
            sequence?: number;
            account_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_address" in data && data.account_address != undefined) {
                    this.account_address = data.account_address;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
                if ("account_number" in data && data.account_number != undefined) {
                    this.account_number = data.account_number;
                }
            }
        }
        get account_address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get account_number() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set account_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            account_address?: string;
            sequence?: number;
            account_number?: number;
        }) {
            const message = new QueryValidatorAccountResponse({});
            if (data.account_address != null) {
                message.account_address = data.account_address;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            if (data.account_number != null) {
                message.account_number = data.account_number;
            }
            return message;
        }
        toObject() {
            const data: {
                account_address?: string;
                sequence?: number;
                account_number?: number;
            } = {};
            if (this.account_address != null) {
                data.account_address = this.account_address;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            if (this.account_number != null) {
                data.account_number = this.account_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.account_address === "string" && this.account_address.length)
                writer.writeString(1, this.account_address);
            if (this.sequence !== undefined)
                writer.writeUint64(2, this.sequence);
            if (this.account_number !== undefined)
                writer.writeUint64(3, this.account_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_address = reader.readString();
                        break;
                    case 2:
                        message.sequence = reader.readUint64();
                        break;
                    case 3:
                        message.account_number = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorAccountResponse {
            return QueryValidatorAccountResponse.deserialize(bytes);
        }
    }
    export class QueryBalanceRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }) {
            const message = new QueryBalanceRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBalanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBalanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBalanceRequest {
            return QueryBalanceRequest.deserialize(bytes);
        }
    }
    export class QueryBalanceResponse extends pb_1.Message {
        constructor(data?: any[] | {
            balance?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get balance() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set balance(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            balance?: string;
        }) {
            const message = new QueryBalanceResponse({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: string;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.balance === "string" && this.balance.length)
                writer.writeString(1, this.balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBalanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBalanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balance = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBalanceResponse {
            return QueryBalanceResponse.deserialize(bytes);
        }
    }
    export class QueryStorageRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            key?: string;
        }) {
            const message = new QueryStorageRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                key?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (typeof this.key === "string" && this.key.length)
                writer.writeString(2, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStorageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStorageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStorageRequest {
            return QueryStorageRequest.deserialize(bytes);
        }
    }
    export class QueryStorageResponse extends pb_1.Message {
        constructor(data?: any[] | {
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: string;
        }) {
            const message = new QueryStorageResponse({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: string;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.value === "string" && this.value.length)
                writer.writeString(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStorageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStorageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStorageResponse {
            return QueryStorageResponse.deserialize(bytes);
        }
    }
    export class QueryCodeRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }) {
            const message = new QueryCodeRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCodeRequest {
            return QueryCodeRequest.deserialize(bytes);
        }
    }
    export class QueryCodeResponse extends pb_1.Message {
        constructor(data?: any[] | {
            code?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set code(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: Uint8Array;
        }) {
            const message = new QueryCodeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: Uint8Array;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code !== undefined)
                writer.writeBytes(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCodeResponse {
            return QueryCodeResponse.deserialize(bytes);
        }
    }
    export class QueryTxLogsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
            }
        }
        get hash() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            hash?: string;
        }) {
            const message = new QueryTxLogsRequest({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: string;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.hash === "string" && this.hash.length)
                writer.writeString(1, this.hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTxLogsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTxLogsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTxLogsRequest {
            return QueryTxLogsRequest.deserialize(bytes);
        }
    }
    export class QueryTxLogsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            logs?: dependency_4.ethermint.evm.v1.Log[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
            }
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.ethermint.evm.v1.Log, 1) as dependency_4.ethermint.evm.v1.Log[];
        }
        set logs(value: dependency_4.ethermint.evm.v1.Log[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            logs?: ReturnType<typeof dependency_4.ethermint.evm.v1.Log.prototype.toObject>[];
        }) {
            const message = new QueryTxLogsResponse({});
            if (data.logs != null) {
                message.logs = data.logs.map(item => dependency_4.ethermint.evm.v1.Log.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                logs?: ReturnType<typeof dependency_4.ethermint.evm.v1.Log.prototype.toObject>[];
            } = {};
            if (this.logs != null) {
                data.logs = this.logs.map((item: dependency_4.ethermint.evm.v1.Log) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.logs !== undefined)
                writer.writeRepeatedMessage(1, this.logs, (item: dependency_4.ethermint.evm.v1.Log) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTxLogsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTxLogsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.ethermint.evm.v1.Log.deserialize(reader), dependency_4.ethermint.evm.v1.Log));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTxLogsResponse {
            return QueryTxLogsResponse.deserialize(bytes);
        }
    }
    export class QueryBlockLogsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            hash?: string;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get hash() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            hash?: string;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryBlockLogsRequest({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: string;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.hash === "string" && this.hash.length)
                writer.writeString(1, this.hash);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBlockLogsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBlockLogsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBlockLogsRequest {
            return QueryBlockLogsRequest.deserialize(bytes);
        }
    }
    export class QueryBlockLogsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            tx_logs?: dependency_4.ethermint.evm.v1.TransactionLogs[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_logs" in data && data.tx_logs != undefined) {
                    this.tx_logs = data.tx_logs;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get tx_logs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.ethermint.evm.v1.TransactionLogs, 1) as dependency_4.ethermint.evm.v1.TransactionLogs[];
        }
        set tx_logs(value: dependency_4.ethermint.evm.v1.TransactionLogs[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            tx_logs?: ReturnType<typeof dependency_4.ethermint.evm.v1.TransactionLogs.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryBlockLogsResponse({});
            if (data.tx_logs != null) {
                message.tx_logs = data.tx_logs.map(item => dependency_4.ethermint.evm.v1.TransactionLogs.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_logs?: ReturnType<typeof dependency_4.ethermint.evm.v1.TransactionLogs.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.tx_logs != null) {
                data.tx_logs = this.tx_logs.map((item: dependency_4.ethermint.evm.v1.TransactionLogs) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_logs !== undefined)
                writer.writeRepeatedMessage(1, this.tx_logs, (item: dependency_4.ethermint.evm.v1.TransactionLogs) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBlockLogsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBlockLogsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_logs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.ethermint.evm.v1.TransactionLogs.deserialize(reader), dependency_4.ethermint.evm.v1.TransactionLogs));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBlockLogsResponse {
            return QueryBlockLogsResponse.deserialize(bytes);
        }
    }
    export class QueryBlockBloomRequest extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }) {
            const message = new QueryBlockBloomRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBlockBloomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBlockBloomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBlockBloomRequest {
            return QueryBlockBloomRequest.deserialize(bytes);
        }
    }
    export class QueryBlockBloomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            bloom?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bloom" in data && data.bloom != undefined) {
                    this.bloom = data.bloom;
                }
            }
        }
        get bloom() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set bloom(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            bloom?: Uint8Array;
        }) {
            const message = new QueryBlockBloomResponse({});
            if (data.bloom != null) {
                message.bloom = data.bloom;
            }
            return message;
        }
        toObject() {
            const data: {
                bloom?: Uint8Array;
            } = {};
            if (this.bloom != null) {
                data.bloom = this.bloom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bloom !== undefined)
                writer.writeBytes(1, this.bloom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBlockBloomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBlockBloomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bloom = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBlockBloomResponse {
            return QueryBlockBloomResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            params?: dependency_4.ethermint.evm.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_4.ethermint.evm.v1.Params, 1) as dependency_4.ethermint.evm.v1.Params;
        }
        set params(value: dependency_4.ethermint.evm.v1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_4.ethermint.evm.v1.Params.prototype.toObject>;
        }) {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_4.ethermint.evm.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_4.ethermint.evm.v1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.params !== undefined)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_4.ethermint.evm.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryBaseFeeRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new QueryBaseFeeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBaseFeeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBaseFeeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBaseFeeRequest {
            return QueryBaseFeeRequest.deserialize(bytes);
        }
    }
    export class QueryBaseFeeResponse extends pb_1.Message {
        constructor(data?: any[] | {
            base_fee?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("base_fee" in data && data.base_fee != undefined) {
                    this.base_fee = data.base_fee;
                }
            }
        }
        get base_fee() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set base_fee(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            base_fee?: string;
        }) {
            const message = new QueryBaseFeeResponse({});
            if (data.base_fee != null) {
                message.base_fee = data.base_fee;
            }
            return message;
        }
        toObject() {
            const data: {
                base_fee?: string;
            } = {};
            if (this.base_fee != null) {
                data.base_fee = this.base_fee;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.base_fee === "string" && this.base_fee.length)
                writer.writeString(1, this.base_fee);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBaseFeeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBaseFeeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.base_fee = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBaseFeeResponse {
            return QueryBaseFeeResponse.deserialize(bytes);
        }
    }
    export class QueryStaticCallResponse extends pb_1.Message {
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }) {
            const message = new QueryStaticCallResponse({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data !== undefined)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStaticCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStaticCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStaticCallResponse {
            return QueryStaticCallResponse.deserialize(bytes);
        }
    }
    export class EthCallRequest extends pb_1.Message {
        constructor(data?: any[] | {
            args?: Uint8Array;
            gas_cap?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("gas_cap" in data && data.gas_cap != undefined) {
                    this.gas_cap = data.gas_cap;
                }
            }
        }
        get args() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set args(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get gas_cap() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set gas_cap(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            args?: Uint8Array;
            gas_cap?: number;
        }) {
            const message = new EthCallRequest({});
            if (data.args != null) {
                message.args = data.args;
            }
            if (data.gas_cap != null) {
                message.gas_cap = data.gas_cap;
            }
            return message;
        }
        toObject() {
            const data: {
                args?: Uint8Array;
                gas_cap?: number;
            } = {};
            if (this.args != null) {
                data.args = this.args;
            }
            if (this.gas_cap != null) {
                data.gas_cap = this.gas_cap;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.args !== undefined)
                writer.writeBytes(1, this.args);
            if (this.gas_cap !== undefined)
                writer.writeUint64(2, this.gas_cap);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EthCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EthCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.args = reader.readBytes();
                        break;
                    case 2:
                        message.gas_cap = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EthCallRequest {
            return EthCallRequest.deserialize(bytes);
        }
    }
    export class EstimateGasResponse extends pb_1.Message {
        constructor(data?: any[] | {
            gas?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gas" in data && data.gas != undefined) {
                    this.gas = data.gas;
                }
            }
        }
        get gas() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set gas(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gas?: number;
        }) {
            const message = new EstimateGasResponse({});
            if (data.gas != null) {
                message.gas = data.gas;
            }
            return message;
        }
        toObject() {
            const data: {
                gas?: number;
            } = {};
            if (this.gas != null) {
                data.gas = this.gas;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gas !== undefined)
                writer.writeUint64(1, this.gas);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EstimateGasResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EstimateGasResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gas = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EstimateGasResponse {
            return EstimateGasResponse.deserialize(bytes);
        }
    }
}
